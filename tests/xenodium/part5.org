[[file:images/faster-elfeed-browsing-with-paging/elfeed-read-by-page.gif]]
* [2018-11-10 Sat] Faster junk mail deletion with mu4e
  :PROPERTIES:
  :CUSTOM_ID: faster-junk-mail-deletion-with-mu4e
  :END:
It's been roughly 5 months since [[http://xenodium.com/#trying-out-mu4e-and-offlineimap][my mu4e email migration]]. Happy with my choice. [[http://www.djcbsoftware.nl/code/mu/mu4e.html][Mu4e]] is awesome.

I now have 4 email accounts managed by mu4e, and unfortunately receiving lots of junk mail.

I regularly peek at junk folders for false positives and delete junk email permanently. I've been wanting a quick way to glance at junk mail and easily delete page by page.

Deleting emails page by page is not supported in mu4e by default. /Fortunately, this is Emacs and we can change that™./

There's a handy package by Roland Walker called [[http://github.com/rolandwalker/window-end-visible][window-end-visible]]. We can use it to select mu4e emails by page and subsequently glue it all together to enable deleting emails by page.

#+BEGIN_SRC emacs-lisp
  (require 'mu4e)
  (require 'window-end-visible)

  (defun ar/mu4e-delete-page ()
    (interactive)
    (set-mark (window-start))
    (goto-char (window-end-visible))
    (activate-mark)
    (mu4e-headers-mark-for-trash)
    (mu4e-mark-execute-all t)
    (deactivate-mark)
    (goto-char (window-start)))
#+END_SRC

I'm a [[https://github.com/jwiegley/use-package][use-package]] fan, so I use it to bind the "v" key to delete /visible emails (by page/).

#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :bind (:map mu4e-headers-mode-map
           ("v" . ar/mu4e-delete-page))
#+END_SRC

#+ATTR_HTML: :width 75% :height 75%
[[file:images/faster-junk-mail-deletion-with-mu4e/delete-junk.gif]]

* [2018-11-06 Tue] Working with vultr's ipv6-only instances
  :PROPERTIES:
  :CUSTOM_ID: working-with-vultrs-ipv6-only-instances
  :END:
Having recently read [[https://www.amazon.co.uk/Transforming-Relationship-Achieving-Financial-Independence/dp/0143115766/][Your Money or Your Life]], I've been cutting down on personal expenses wherever possible. Specially recurring expenses which include monthly charges from VPS hosting. Let's reduce those charges...

My VPS needs are fairly small (mostly hobby and tinkering). [[https://www.vultr.com/?ref=7579034][Vultr]]† has a plan for $2.50/month (not seen anything cheaper). The caveat for the price, you get ipv6 access only (ie. 0000:1111:2222:3333:4444:5555:6666:7777:8888).

So far so good, but my ISP doesn't yet support ipv6:

#+BEGIN_SRC sh
$ ping6 0000:1111:2222:3333:4444:5555:6666:7777:8888
$ ping6: UDP connect: No route to host
#+END_SRC

Fortunately, we can still work with ipv6 by using a tunnel (TIL about [[https://tunnelbroker.net][Hurricane Electric's tunnel broker]]). After signing up and creating a tunnel, they conveniently show you "Example Configurations" from the "Tunnel Details" menu. In my case, macOS:

#+BEGIN_SRC sh
  ifconfig gif0 create
  ifconfig gif0 tunnel <ipv4 client broker IP or DCHP internal IP> <ipv4 server IP>
  ifconfig gif0 inet6 <ipv6 client broker IP> <ipv6 server IP> prefixlen 128
  route -n add -inet6 default <ipv6 server IP>
#+END_SRC

Note: If behind router, use the DHCP internal IP.

After configuring with ifconfig, all is good. Yay!

#+BEGIN_SRC sh
  $ ping6 0000:1111:2222:3333:4444:5555:6666:7777:8888
  PING6(56=40+8+8 bytes) 2001:111:22:aaa::2 --> 0000:1111:2222:3333:4444:5555:6666:7777:8888
  16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=0 hlim=52 time=270.019 ms
  16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=1 hlim=52 time=290.834 ms
  16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=2 hlim=52 time=311.960 ms
  16 bytes from 0000:1111:2222:3333:4444:5555:6666:7777:8888, icmp_seq=3 hlim=52 time=330.902 ms
#+END_SRC

I'm an ipv6 noob. I mostly need ssh access. My typical usages need small tweaks.

For ssh:

#+BEGIN_SRC sh
  ssh -6 username@0000:1111:2222:3333:4444:5555:6666:7777:8888
#+END_SRC

For scp:

#+BEGIN_SRC sh
  scp -6 file.txt username@\[0000:1111:2222:3333:4444:5555:6666:7777:8888\]:/remote/dir/
#+END_SRC

† I get $10 credit if you use this affiliate link. Thank you.

* [2018-11-04 Sun] Shaving bookmarks
  :PROPERTIES:
  :CUSTOM_ID: shaving-bookmarks
  :END:
- [[https://www.independent.co.uk/extras/indybest/fashion-beauty/mens-grooming/best-safety-razors-for-beginners-sensitive-skin-10111508.html][8 best safety razors (The Independent)]].
* [2018-11-04 Sun] Buy it for life bookmarks
  :PROPERTIES:
  :CUSTOM_ID: buy-it-for-life-bookmarks
  :END:
- [[https://www.fjallraven.com][Fjällräven jackets]].
- [[https://www.etsy.com/uk/market/gillette_slim][Gillette slim (Etsy)]].
* [2018-10-29 Mon] Rust bookmarks
  :PROPERTIES:
  :CUSTOM_ID: rust-bookmarks
  :END:
:MODIFIED:
[2021-07-11 Sun]
:END:
- [[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/][Configuring Emacs for Rust development | Robert Krahn]].
- [[https://www.snoyman.com/blog/2018/10/introducing-rust-crash-course][Introducing the Rust crash course]].
- [[https://news.ycombinator.com/item][Rust Language Cheat Sheet (cheats.rs) ]].
* [2018-10-28 Sun] Fonts bookmarks
  :PROPERTIES:
  :CUSTOM_ID: fonts-bookmarks
  :END:
  :MODIFIED:
  [2019-10-20 Sun]
  :END:
- [[https://www.getthefont.com/][Get the Font]].
- [[https://github.com/rsms/inter][GitHub - rsms/inter: The Inter UI font family]].
- [[https://input.fontbureau.com/][Input: Fonts for Code]].
- [[https://app.programmingfonts.org/][Programming Fonts - Test Drive]].
- [[https://www.kutilek.de/sudo-font/][Sudo Coding Font | Jens Kutílek]].
- [[https://github.com/IBM/plex][The package of IBM’s typeface, IBM Plex (font)]].
* [2018-10-17 Wed] imenu on Emacs eshell
  :PROPERTIES:
  :CUSTOM_ID: imenu-on-emacs-eshell
  :END:
  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]] navigation is one of those Emacs gems I didn't discover until much later on. It does what you'd expect in all types of modes. In rare instances, I've found specific modes missing imenu support. Fortunately, this is Emacs and you can fix that.

  [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][Eshell]] has a handy feature to jump back and forth over previous prompts using /M-x eshell-previous-prompt (C-c C-p)/ and /M-x eshell-next-prompt (C-c C-n)/. Upon learning about these two functions, my immediate reaction was to try imenu. Surprisingly, it didn't "just work\n", but a tiny bit of elisp brought balance back to the Emacs universe.

  In an eshell mode hook function, one can set the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Imenu.html#index-imenu_002dgeneric_002dexpression-2058][imenu-generic-expression]] to help it find your favorite prompt:

#+BEGIN_SRC emacs-lisp
  (setq-local imenu-generic-expression
                    '(("Prompt" " $ \\(.*\\)" 1)))
#+END_SRC

  Ah it's the little things...

#+ATTR_HTML: :width 75% :height 75%
[[file:images/imenu-on-emacs-eshell/eshell-imenu.gif]]

ps. If wondering why my imenu experience looks a little different, that's because I'm using Abo Abo's wonderful [[https://github.com/abo-abo/swiper][counsel]] and /M-x counsel-semantic-or-imenu/.

* [2018-10-14 Sun] Encrypted disk image on macOS
  :PROPERTIES:
  :CUSTOM_ID: encrypted-disk-image-on-macos
  :END:
#+ATTR_HTML: :width 75% :height 75%
[[file:images/encrypted-image-on-macos/1.png]]
#+ATTR_HTML: :width 75% :height 75%
[[file:images/encrypted-image-on-macos/2.png]]

* [2018-10-13 Sat] Sheffield travel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: sheffield-travel-bookmarks
  :END:
  :MODIFIED:
  [2018-10-13 Sat]
  :END:
- [[http://streetfoodchef.co.uk/][Street Food Chef]].
- [[http://www.sakushi.co.uk/][Sakushi -Sushi, noodle and Japanese food restaurant in Sheffield]].
* [2018-10-13 Sat] Headsphones bookmarks
  :PROPERTIES:
  :CUSTOM_ID: headsphones-bookmarks
  :END:
  :MODIFIED:
  [2018-12-09 Sun]
  :END:
- [[https://www.steventammen.com/posts/bose-qc35ii-headphones/][Bose QuietComfort 35 II Headphones (StevenTammen.com)]].
  - [[https://www.rtings.com/headphones/tests/isolation/noise-isolation-cancellation-passive-active][Noise Isolation/Cancellation of Headphones (RTINGS.com)]].
- [[https://www.rtings.com/headphones/reviews/sony/wh-1000xm3][Sony WH-1000XM3 Review - RTINGS.com]].
* [2018-10-05 Fri] macOS app bookmarks
  :PROPERTIES:
  :CUSTOM_ID: macos-app-bookmarks
  :END:
:MODIFIED:
[2020-12-13 Sun]
:END:
- [[http://www.hcs.harvard.edu/~jrus/site/cocoa-text.html][Customizing the Cocoa Text System]].
- [[https://dmgbuild.readthedocs.io/en/latest/][dmgbuild - A command line tool to build .dmg files]].
- [[https://github.com/GetStream/Winds/blob/master/README.md][GetStream/Winds: macOS rss reader]].
- [[https://github.com/herrbischoff/awesome-macos-command-line#itunes][GitHub - herrbischoff/awesome-macos-command-line]].
- [[https://github.com/koekeishiya/yabai][GitHub - koekeishiya/yabai: A tiling window manager for macOS based on binary]].
- [[https://github.com/TermiT/Flycut][GitHub - TermiT/Flycut: Clean and simple clipboard manager for developers]].
- [[https://news.ycombinator.com/item?id=21794858][Hidden Bar: macOS utility to hide unused menu bar icons, written in Swift]].
- [[https://www.obdev.at/products/launchbar/index.html][LaunchBar 6 (can I implement flows in Emacs)?]].
- [[https://news.ycombinator.com/item?id=21179713][List of open source applications for macOS (Hacker News)]].
- [[https://macopenweb.com/][Mac Open Web, by Brian Warren]].
- [[https://eclecticlight.co/mac-troubleshooting-summary/][Mac Troubleshooting Summary – The Eclectic Light Company]].
- [[https://github.com/kam800/MachObfuscator/blob/master/README.md][MachObfuscator/README.md at master · kam800/MachObfuscator · GitHub]].
- [[https://papers.put.as/macosx/macosx/][macOS · Papers, Slides and Thesis Archive]].
- [[https://www.gonsie.com/blorg/ipad-setup.html][My iPad Setup]].
- [[https://github.com/nikitavoloboev/my-mac-os][My wonderful world of macOS]].
- [[https://github.com/nikitavoloboev/my-mac-os][my-mac-os: My wonderful world of macOS]].
- [[https://thesweetsetup.com/netnewswire-5-0-relaunches-as-an-open-source-rss-reader-for-the-mac/][NetNewsWire 5.0 Relaunches as an Open-Source RSS Reader for the Mac – The Sweet Setup]].
- [[https://smilesoftware.com/pdfpen/?][PDF Editor - PDFpen - Edit PDF Files (Smile Software)]].
- [[http://solutions.weblite.ca/pdfocrx/][PDF OCR X - Mac & Windows OCR Software to convert PDFs and Images to Text]].
- [[https://apps.apple.com/us/app/rested-simple-http-requests/id421879749][‎RESTed - Simple HTTP Requests on the Mac App Store]].
* [2018-09-30 Sun] Gaming bookmarks
  :PROPERTIES:
  :CUSTOM_ID: gaming-bookmarks
  :END:
:MODIFIED:
[2021-07-11 Sun]
:END:
- [[http://openemu.org/][OpenEmu - Multiple Video Game System for owned ROMs]].
- [[https://twitter.com/SethAbramson/status/1412177674596986881][The Top 100 Android Video Games]].
* [2018-09-29 Sat] Lua bookmarks
  :PROPERTIES:
  :CUSTOM_ID: lua-bookmarks
  :END:
:MODIFIED:
[2020-12-26 Sat]
:END:
- [[https://github.com/sumneko/lua-language-server/wiki/Build-and-Run-(Standalone)][Build and Run (Standalone) · sumneko/lua-language-server Wiki · GitHub]].
- [[https://sepisoad.com/blog/how%20to%20lua%20and%20c%20-%20a%20short%20novel.html][how to lua and c - a short novel]].
- [[https://luadigest.immortalin.com/][Lua Digest]].
- [[https://news.ycombinator.com/item?id=17969795][Lua tables (Hacker News)]].
* [2018-09-29 Sat] Skin product bookmarks
  :PROPERTIES:
  :CUSTOM_ID: skin-product-bookmarks
  :END:
  :MODIFIED:
  [2018-09-29 Sat]
  :END:
- [[https://www.rebootedmom.com/diy-deodorant-bars/][DIY Deodorant Bars - Rebooted Mom]].
- [[https://blog.freepeople.com/2015/03/allnatural-deodorant-bars/][How to Make Your Own All-Natural Deodorant Bars]].
- [[http://sarahfrascamakeup.blogspot.com/2011/04/good-bad-and-ugly-lush-cosmetics.html][Sarah Frasca Makeup: The good, the bad and the ugly: Lush Cosmetics]].
- [[https://www.ewg.org/skindeep/][Skin Deep® Cosmetics Database (EWG)]].
* [2018-09-29 Sat] Sustainability bookmarks
  :PROPERTIES:
  :CUSTOM_ID: sustainability-bookmarks
  :END:
- [[https://factory45.co/][Source Fabric. Find a Manufacturer. Raise Money to Fund Production. (Factory45)]].
* [2018-09-29 Sat] Investment platform bookmarks
  :PROPERTIES:
  :CUSTOM_ID: investment-platform-bookmarks
  :END:
:MODIFIED:
[2021-07-11 Sun]
:END:
- [[https://www.portfoliovisualizer.com/backtest-portfolio][Backtest Portfolio Asset Allocation]].
- [[https://bravos.co/][Bravos]].
- [[http://www.cmlviz.com/][CMLviz.com - BETA]].
- [[https://www.degiro.eu/][DEGIRO - Online Stock Trading - Stockbroking (cheaper?)]].
- [[https://iextrading.com/developer/][Free Stock API for Realtime and Historical Data (IEX)]].
- [[https://freetrade.io/][Freetrade - Free Stock Investing]].
- [[https://www.halifax.co.uk/sharedealing/][Halifax UK | Buying and selling (Sharedealing)]].
- [[https://www.hl.co.uk/][Hargreaves Lansdown (ISAs, pensions, funds and shares)]].
- [[https://twitter.com/kanhaic/status/1411302254884261893][How I have automated my #algotrading and spend less than ₹10]].
- [[https://www.iweb-sharedealing.co.uk/share-dealing-home.asp][IWeb Share Dealing (cheaper?)]].
- [[https://www.fundingcircle.com/uk/investors/][Lend to UK Businesses | Investment (Funding Circle)]].
- [[https://www.ratesetter.com/][RateSetter Peer To Peer Lender (P2P Investing and Borrowing)]].
- [[https://www.stockportfolioorganizer.com/][Stock Portfolio Management Software (Stock Portfolio Organizer)]].
- [[https://stockdaddy.io/][StockDaddy - Free, real-time, easy to use stock portfolio tracker]].
- [[https://stocklight.com/][StockLight - Australia's premier investing app]].
- [[https://wallmine.com/stocks-and-cryptocurrency-portfolio-tracker][Stocks and cryptocurrency portfolio tracker (wallmine)]].
* [2018-09-28 Fri] Minimalist bookmarks
  :PROPERTIES:
  :CUSTOM_ID: minimalist-bookmarks
  :END:
  :MODIFIED:
  [2019-05-10 Fri]
  :END:
- [[https://mnmll.ist][mnmll.ist: listing all things minimalist]].
- [[https://www.raisingsimple.com][Raising Simple | Streamline your home. Simplify family life (minimalism)]].
* [2018-09-23 Sun] Recover from Time Machine's "backup already in use"
  :PROPERTIES:
  :CUSTOM_ID: recover-from-time-machines-backup-already-in-use
  :END:
  Started seeing "backup already in use" error from my daily Time Machine backups, against my Synology. Disabling and re-enabling AFP did the job (via Synology -> Control Panel -> Files Services -> Enable AFP service).

#+ATTR_HTML: :width 75% :height 75%
[[file:images/recover-from-time-machines-backup-already-in-use/re-enable_afp_service.png]]

* [2018-09-03 Mon] CMake bookmarks
  :PROPERTIES:
  :CUSTOM_ID: cmake-bookmarks
  :END:
  :MODIFIED:
  [2018-09-03 Mon]
  :END:
- [[https://news.ycombinator.com/item?id=17897685][An Introduction to Modern CMake (Hacker News)]].
- [[https://cliutils.gitlab.io/modern-cmake/][An Introduction to Modern CMake]].
- [[https://steveire.wordpress.com/2017/11/05/embracing-modern-cmake/][Embracing Modern CMake (Steveire's Blog)]].
* [2018-08-28 Tue] GTD/Get things done bookmarks
  :PROPERTIES:
  :CUSTOM_ID: gtdget-things-done-bookmarks
  :END:
  :MODIFIED:
  [2019-05-18 Sat]
  :END:
- [[https://jamesstuber.com/plan-your-day/][Daily Time Management with Todoist and Google Calendar | JamesStuber.com]].
- [[https://klinger.io/post/71640845938/dont-drown-in-email-how-to-use-gmail-more][Don’t drown in email! How to use Gmail more efficiently. - Startup Lessons Learned]].
- [[https://praxis.fortelabs.co/gtd-x-pkm-8ff720ef6939/][Getting Things Done + Personal Knowledge Management - Praxis]].
- [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Orgmode for GTD/Get things done]].
* [2018-08-28 Tue] Pandoc bookmarks
  :PROPERTIES:
  :CUSTOM_ID: pandoc-bookmarks
  :END:
  :MODIFIED:
  [2018-11-17 Sat]
  :END:
- [[http://www.gabrielgambetta.com/tgl_open_source.html][How I wrote and published my novel using only open source tools]].
- [[https://news.ycombinator.com/item?id=17855104][Pandoc (Hacker News)]].
- [[https://pandoc.org/demos.html][Pandoc - Demos]].
* [2018-08-27 Mon] Mauritius travel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: mauritius-travel-bookmarks
  :END:
  :MODIFIED:
  [2020-03-11 Wed]
  :END:
- [[https://www.nomadasaurus.com/things-to-do-in-mauritius/][20 Amazing Things to Do in Mauritius (2020 Guide)]].
- [[https://1886corsontea.com][Corson vanilla tea]].
- [[https://www.tripadvisor.co.uk/Attraction_Review-g293816-d477276-Reviews-Ile_aux_Cerfs-Mauritius.html#photos;aggregationId=101&albumid=101&filter=7&ff=447514694][Ile aux Cerfs (Mauritius) - Jonathan/Vanessa excursions]].
- [[https://en.wikipedia.org/wiki/Le_Morne_Brabant][Le Morne Brabant (Wikipedia)]].
- [[https://mauritiusattractions.com/mauritius-beaches-i-80.html][Mauritius Beaches - the Best Beaches in Mauritius - Mauritius Attractions]].
- [[https://www.bugbog.com/beaches/beach_pictures_mauritius/][Mauritius beaches: pictures, information, resorts, sights]].
- [[https://www.bugbog.com/beaches/beach_pictures_mauritius/mauritius_sights/#ganga][Mauritius sights, large pictures, best things to see and do]].
- [[https://www.maurinet.com/tourist_information/public_beaches][Public Beaches :: Mauritius Island Online]].
- [[https://mel365.com/best-beaches-in-mauritius/][The 12 best beaches in Mauritius 2020 {with map and photos}]].
- [[https://theculturetrip.com/africa/mauritius/articles/the-best-markets-in-mauritius/][The Best Markets in Mauritius]].
- [[https://theculturetrip.com/africa/mauritius/articles/the-best-spots-to-eat-roti-in-port-louis-mauritius/][The Best Spots to Eat Roti in Port Louis, Mauritius]].
- [[https://theculturetrip.com/africa/mauritius/articles/the-essential-guide-to-port-louis-central-market-in-mauritius/][The Essential Guide to Port Louis' Central Market in Mauritius]].
* [2018-08-27 Mon] Scala bookmarks
  :PROPERTIES:
  :CUSTOM_ID: scala-bookmarks
  :END:
- [[https://leanpub.com/fpmortals/read][Functional Programming for Mortals (Leanpub)]].
* [2018-08-22 Wed] Actionable URLs in Emacs buffers
  :PROPERTIES:
  :CUSTOM_ID: actionable-urls-in-emacs-buffers
  :END:
  Should have enabled actionable URLs in my Emacs buffers long ago. Can now click or press return to follow links. It's great on eshell, compilation buffers, async shell commands, code, etc.

#+BEGIN_SRC emacs-lisp
  (use-package goto-addr
    :hook ((compilation-mode . goto-address-mode)
           (prog-mode . goto-address-prog-mode)
           (eshell-mode . goto-address-mode)
           (shell-mode . goto-address-mode))
    :bind (:map goto-address-highlight-keymap
                ("<RET>" . goto-address-at-point)
                ("M-<RET>" . newline))
    :commands (goto-address-prog-mode
               goto-address-mode))
#+END_SRC

#+ATTR_HTML: :width 75% :height 75%
[[file:images/actionable-urls-in-emacs-buffers/goto-address.png]]

* [2018-08-22 Wed] Bazel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: bazel-bookmarks
  :END:
:MODIFIED:
[2020-11-15 Sun]
:END:
- [[https://github.com/vincent-picaud/Bazel_with_GTest][Bazel_with_GTest: C++ project skeleton with Bazel & GTest]].
- [[https://tulipemoutarde.be/posts/bazel-for-mobile-apps-part-2/][Build mobile apps with Bazel. Part 2: iOS]].
- [[https://github.com/bazelbuild/rules_docker][GitHub - bazelbuild/rules_docker: Rules for building and handling Docker images with Bazel]].
- [[https://github.com/jin/awesome-bazel][GitHub - jin/awesome-bazel: A curated list of Bazel rules, tooling and resources]].
- [[https://jakemccrary.com/blog/2020/06/28/using-bazel-to-help-fix-flaky-tests/][Using Bazel to help fix flaky tests - Jake McCrary]].
* [2018-08-18 Sat] Palestine travel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: palestine-travel-bookmarks
  :END:
- [[https://www.tripadvisor.co.uk/Restaurant_Review-g667136-d7360437-Reviews-Rukab_s_Ice_Cream-Ramallah_Binyamin_Region_West_Bank.html][Rukab's Ice Cream, Ramallah (Trip advisor)]].
* [2018-08-18 Sat] Enabling Control-Meta(⌘)-D on macOS
  :PROPERTIES:
  :CUSTOM_ID: enabling-control-meta-d-on-macos
  :END:
I use command (⌘) as my Emacs Meta key. Recently discovered C-M-d is not available to Emacs for binding keys on macOS. Stack Exchange had the [[https://apple.stackexchange.com/questions/22785/how-do-i-disable-the-command-control-d-word-definition-keyboard-shortcut-in-os-x][workaround]]:

#+BEGIN_SRC sh
   defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70 '<dict><key>enabled</key><false/></dict>'
#+END_SRC

* [2018-08-13 Mon] Recycling bookmarks
  :PROPERTIES:
  :CUSTOM_ID: recycling-bookmarks
  :END:
  :MODIFIED:
  [2018-08-13 Mon]
  :END:
- [[https://myplasticfreelife.com/][My Plastic-free Life]].
* [2018-08-12 Sun] Comoro islands travel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: comoro-islands-travel-bookmarks
  :END:
- [[https://www.quora.com/What-are-some-of-the-exotic-tourist-destinations-which-are-not-commonly-known/answer/Patrick-Crosset][Visiting The Comoros Islands (Quota)]].
* [2018-08-12 Sun] France travel bookmarks
:PROPERTIES:
:CUSTOM_ID: france-travel-bookmarks
:END:
:MODIFIED:
[2023-06-09 Fri]
:END:
- [[https://www.lonelyplanet.com/articles/france-top-food-experiences][France's 10 top food experiences - Lonely Planet]].
- [[https://thefrenchtouch.quora.com/GR-20-Best-Mountain-Hiking-in-France][GR 20 : Best Mountain Hiking in France - The French Touch - Quora]].
- [[https://twitter.com/malk_zameth/status/1278288570021826563][Hmmm I want to take some August vacation time in a city I can go by train from paris and is nice to visit calm and not too expensive ]].
* [2018-08-12 Sun] Corsica travel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: corsica-travel-bookmarks
  :END:
- [[https://thefrenchtouch.quora.com/National-Geographic-Corsica-is-The-Best-Place-in-the-World-to-go-in-2015][National Geographic : Corsica is The Best Place... - The French Touch - Quora]].
* [2018-08-12 Sun] Mozambique travel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: mozambique-travel-bookmarks
  :END:
- [[https://africa.quora.com/Mozambiques-beaches][Mozambique's beaches - Africa is Back - Quora]].
* [2018-08-12 Sun] M-r history search in git-commit-mode
  :PROPERTIES:
  :CUSTOM_ID: m-r-history-search-in-git-commit-mode
  :END:
I've grown accustomed to M-r bindings to search Emacs history. Been wanting similar functionality to search commit message history. Turns out /log-edit-comment-ring/ has some of my local commit message history. Feeding it to /completing-read/ gives me an easily searchable history when using a completing framework like ivy or helm:

#+BEGIN_SRC emacs-lisp
  (defun ar/git-commit-search-message-history ()
    "Search and insert commit message from history."
    (interactive)
    (insert (completing-read "History: "
                             ;; Remove unnecessary newlines from beginning and end.
                             (mapcar (lambda (text)
                                       (string-trim text))
                                     (ring-elements log-edit-comment-ring)))))
#+END_SRC

Now we bind it to /M-r/ and we're good to go:

#+BEGIN_SRC emacs-lisp
  (bind-key "M-r" #'ar/git-commit-search-message-history git-commit-mode-map)
#+END_SRC

May also want to persist /log-edit-comment-ring/ across Emacs sessions by adding /log-edit-comment-ring/ to savehist variables. Also ensure /savehist-mode/ is enabled:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'savehist-additional-variables log-edit-comment-ring)
  (savehist-mode +1)
#+END_SRC

#+ATTR_HTML: :width 75% :height 75%
[[file:images/m-r-history-search-in-git-commit-mode/m-r-commit-history.png]]

* [2018-08-09 Thu] Morning smoothie
  :PROPERTIES:
  :CUSTOM_ID: morning-smoothie
  :END:
Big fan of my morning power smoothie. Best deals I've found so far:

- Almonds (BuyWholeFoodsOnline.co.uk, [[https://www.amazon.co.uk/gp/product/B004XJ72HI][£1.06/100g @ Amazon]]).
- Banana.
- Blueberries.
- Chia seeds ([[https://www.realfoodsource.com/product/whole-natural-dark-chia-seeds/][£4.99/Kg @ Real Food Source]]).
- Cocoa powder (Active foods, [[https://www.bulkpowders.co.uk/organic-cacao-powder.html][£ 1.7/100g @ Bulk Powders]]).
- Coconut water (Innocent, [[https://www.tesco.com/groceries/en-GB/products/288178112][£0.37/100ml @ Tesco]]).
- Crunchy peanut butter ([[https://www.realfoodsource.com/product/peanut-butter/][£ 4.99/Kg @ Real Food Source]]).
- Matcha powder (Active [[https://www.bulkpowders.co.uk/matcha-green-tea-powder.html][£6.8/100g @ Bulk Powders]]).
- Strawberries.

ps. I have no affiliation to either retailer. Prices may change.

* [2018-08-08 Wed] Installing ludget (ledger visualization
  :PROPERTIES:
  :CUSTOM_ID: installing-ludget-ledger-visualization
  :END:

Needed python3:

#+BEGIN_SRC sh
  brew install python3
#+END_SRC

Use pip3 to install ludget:

#+BEGIN_SRC sh
  pip3 install ludget
#+END_SRC

* [2018-08-08 Wed] Ledger bookmarks
  :PROPERTIES:
  :CUSTOM_ID: ledger-bookmarks
  :END:
:MODIFIED:
[2021-09-30 Thu]
:END:
- [[https://github.com/adept/full-fledged-hledger]["Full-fledged Hledger" Tutorial (interesting approach with great traceability and regeneration)]].
- [[https://github.com/adept/full-fledged-hledger/wiki]["Full-fledged Hledger" Tutorial]].
- [[https://www.khanacademy.org/economics-finance-domain/core-finance/accounting-and-financial-stateme][Accounting and financial statements (Khan Academy)]].
- [[https://cvillefoss.blog/2019/02/12/accounting-in-plain-text-part-1/][Accounting in Plain Text, Part 1 – cvilleFOSS]].
- [[http://matthiaskauer.com/2015/08/command-line-accounting-a-look-at-the-various-ledger-ports/][Command Line Accounting - A look at the various ledger ports (mkauer)]].
- [[https://www.reddit.com/r/emacs/comments/46hs9q/conquering_your_finances_with_emacs_and_ledger/][Conquering Your Finances with Emacs and Ledger : emacs]].
- [[https://github.com/awalker4/ledgerTalk2016][Conquering your finances with Emacs and Ledger]].
- [[https://github.com/ledger/ledger/wiki/CSV-Import][Convert a CSV file (comma separated values) from your bank into ledger format]].
- [[https://frdmtoplay.com/envelope-budgeting-with-ledger/][Envelope Budgeting with ledger]].
- [[https://github.com/simonmichael/hledger/tree/master/examples/csv][Examples of recent and older CSV rules files for ledger]].
- [[https://github.com/adept/full-fledged-hledger][full-fledged-hledger: Tutorial on Hledger setup]].
- [[https://github.com/barrucadu/finances][GitHub - barrucadu/finances: A small tool to visualise my hledger journal.]].
- [[https://github.com/Clever/csvlint][GitHub - Clever/csvlint: library and command line tool that validates a CSV file]].
- [[https://www.reddit.com/r/Bitcoin/comments/155gw5/heres_how_you_use_ledger_to_account_for_bitcoin/][Here's how you use ledger to account for Bitcoin transactions]].
- [[https://pauley.org.za/hledger-flow/][Hledger Flow: Step-By-Step]].
- [[https://www.reddit.com/r/plaintextaccounting/comments/8b10o0/importing_trans=actions_from_bank/][Importing transactions from bank. : plaintextaccounting (Reddit)]].
- [[https://patrickskiba.com/ledger-cli/2019/12/07/introduction-to-ledger-cli.html][Introduction to ledger and text-based accounting | Patrick Skiba]].
- [[https://sirodoht.com/blog/introduction-to-plain-text-accounting/][Introduction to plain text accounting (sirodoht blog)]].
- [[https://devhints.io/ledger][Ledger CLI cheatsheet]].
- [[https://devhints.io/ledger-csv][Ledger CSV format cheatsheet]].
- [[https://devhints.io/ledger-examples][Ledger examples cheatsheet]].
- [[https://devhints.io/ledger-periods][Ledger periods cheatsheet]].
- [[https://felixcrux.com/blog/ledger-practices][Ledger Practices - Felix Crux]].
- [[https://devhints.io/ledger-query][Ledger queries cheatsheet]].
- [[https://github.com/sheehamj13/ledger-reports][Ledger Report Scripts (tested on macOS Mojave)]].
- [[https://news.ycombinator.com/item?id=7707262][Ledger, a powerful CLI accounting tool (Hacker News)]].
- [[https://www.reddit.com/r/emacs/comments/6a3oxv/ledgerledgermode_tips_and_tricks/][ledger/ledger-mode tips and tricks? (Reddit)]].
- [[https://www.ledger-cli.org/3.0/doc/ledger3.html#The-convert-command][Ledger: Command-Line Accounting (convert csv command)]].
- [[https://www.ledger-cli.org/3.0/doc/ledger3.html][Ledger: Command-Line Accounting (documentation)]].
- [[https://gitlab.com/rjurga/ludget][ludget: ledger-cli data visualization]].
- [[https://memo.barrucadu.co.uk/personal-finance.html][Memo's personal Finance post on plain-text accounting]].
- [[https://plaintextaccounting.org/#comparisons][Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (comparisons)]].
- [[https://plaintextaccounting.org/#data-importconversion][Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (import)]].
- [[https://www.petekeen.net/keeping-finances-with-ledger][Program your Finances: Command-line Accounting (Pete Keen)]].
- [[https://www.sundialdreams.com/report-scripts-for-ledger-cli-with-gnuplot/][Report Scripts for Ledger CLI with Gnuplot (日光漫想)]].
- [[https://news.ycombinator.com/item?id=17845565][Show HN: Ledger-analytics – Analytics for ledger-cli (Hacker News)]].
- [[https://github.com/rememberYou/.emacs.d/blob/a095e0e3e88cd64e6ef5e8062d3215d67ad9e285/config.org#ledger][Terencio's Ledger Emacs config]].
- [[https://plaintextproject.online][The Plain Text Project]].
- [[https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money][TIP: How I use ledger to track my money : emacs]].
- [[http://rantsideasstuff.com/posts/2018/07/01-tracking-investments-in-lots-with-hledger/][Tracking Investments in Lots with Hledger]].
- [[https://www.reddit.com/r/plaintextaccounting/comments/bhxdew/unrealized_gains/][Unrealized gains : plaintextaccounting]].
- [[https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html][Using Ledger for YNAB-like envelope budgeting]].
- [[https://memo.barrucadu.co.uk/hledger-influxdb-grafana.html][Visualise your finances with hledger, InfluxDB, and Grafana]].
- [[https://www.mint.com/mint-categories][Ways to Categorize Your Spending (Mint)]].
- [[https://github.com/ledger/ledger/wiki/Who's-using-ledger%3F][Who's using ledger? · ledger/ledger Wiki]].
* [2018-08-07 Tue] Tip: Convert .texi to .info
  :PROPERTIES:
  :CUSTOM_ID: tip-convert-texi-to-info
  :END:

Convert with:

#+BEGIN_SRC sh
  makeinfo doc.texi
#+END_SRC

View with:

Open in Emacs and render as info with:

#+BEGIN_SRC emacs-lisp
  (defun ar/format-info-mode ()
    (interactive)
    (let ((file-name (buffer-file-name)))
      (kill-buffer (current-buffer))
      (info file-name)))
#+END_SRC
* [2018-07-25 Wed] Marking 20k emails as read
  :PROPERTIES:
  :CUSTOM_ID: marking-20k-emails-as-read
  :End:
[[http://isync.sourceforge.net/][Mbsync]] and [[https://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] are great for syncing and handling IMAP email. I've now migrated 4 email addresses, including an old Yahoo account.

I wanted to mark all my Yahoo unread emails as read. Yahoo's webmail enables marking 500 emails at a time, making the process a little tedious.

[[https://groups.google.com/forum/#!forum/mu-discuss][Mu-discuss]] has a handy [[https://groups.google.com/d/msg/mu-discuss/zaA394sH1Ow/QSVPXS22BQAJ][thread]], highlighting that moving/renaming synced messages (in your local file system) would do the job. This worked well for me.

Let's do just that...

*WARNING:* Copy a small sample of your mails to a separate directory and run some trials until you feel comfortable.

Find your mail directory.

#+BEGIN_SRC sh
  cd path/to/mail
#+END_SRC

Peek at the messages you'd like to mark unread:

#+BEGIN_SRC sh
  ls -1 new/
#+END_SRC

#+RESULTS:
  1529958027.57518_11.mbp,U=8415:2,
  1531346210.38822_3.mbp,U=8741:2,
  1532464801.21057_1.mbp,U=9028:2,
  1532464801.21057_2.mbp,U=9029:2,

Rename message files by appending "S" to their filename and moving from new/ to cur/ directory.

#+BEGIN_SRC sh
  for FILE in new/*; do mv "${FILE}" cur/$(basename "${FILE}")S; done;
#+END_SRC

We can verify the move.

#+BEGIN_SRC sh
  ls -1 cur/
#+END_SRC

#+RESULTS:
  1529958027.57518_11.mbp,U=8415:2,S
  1531346210.38822_3.mbp,U=8741:2,S
  1532464801.21057_1.mbp,U=9028:2,S
  1532464801.21057_2.mbp,U=9029:2,S

Let's sync the local changes.

#+BEGIN_SRC sh
  mbsync -Va
#+END_SRC

...and we're done ;)

* [2018-07-24 Tue] Show iOS simulator touches
  :PROPERTIES:
  :CUSTOM_ID: show-ios-simulator-touches
  :END:
TIL from [[https://twitter.com/liamnichols_/status/1018812142693253120?s=12][this tweet]], that you can enable showing touches on iOS simulator. This is handy for making nicer screencasts.

#+BEGIN_SRC sh
  defaults write http://com.apple .iphonesimulator ShowSingleTouches 1
#+END_SRC
* [2018-07-15 Sun] Amsterdam travel bookmarks
  :PROPERTIES:
  :CUSTOM_ID: amsterdam-travel-bookmarks
  :END:
- [[https://belowthesurface.amsterdam/en/][Below the Surface: The archaeological finds of the North / Southline in Amsterdam]].
* [2018-07-14 Sat] Hardware bookmarks
  :PROPERTIES:
  :CUSTOM_ID: hardware-bookmarks
  :END:
  :MODIFIED:
  [2020-05-23 Sat]
  :END:
- [[https://www.romanzolotarev.com/setup.html][Roman Zolotarev's OpenBSD on my fanless desktop computer (really sweet setup)]].
- [[https://michael.stapelberg.ch/posts/2020-05-23-desk-setup/][stapelberg uses this: my 2020 desk setup]].
* [2018-07-11 Wed] fitbit API, org babel, and gnuplot
  :PROPERTIES:
  :CUSTOM_ID: fitbit-api-org-babel-and-gnuplot
  :END:
Retook running recently. Took the dust off my aria scale and used the opportunity to check out fitbit's API.

First register your app at [[https://dev.fitbit.com/apps/new][dev.fitbit.com/apps/new]] and get a client_id=AABBCC.

#+ATTR_HTML: :width 75% :height 75%
[[file:images/fitbit-api-org-babel-and-gnuplot/fitbitapp.png]]

You'll also need your USER_ID, from your Fitbitx user profile.

#+ATTR_HTML: :width 75% :height 75%
[[file:images/fitbit-api-org-babel-and-gnuplot/fitbituser.png]]

We'll also need a token. I used the [[https://dev.fitbit.com/build/reference/web-api/oauth2/][implicit grant flow]] URL in my browser and extracted access_token=TOKEN.

Now let's wire up two org source blocks to fetch the data and subsequently plot using gnuplot.

It's pretty neat. You can take the output from one source block and use it as input to another.

We use curl to fetch data from fitbit's API and pipe through [[https://stedolan.github.io/jq/][jq]] and sed to massage the output format into two columns.

*Note:* Before using gnuplot in org babel, you'll need to install the gnuplot package and add to babel languages.

#+BEGIN_SRC emacs-lisp
  (use-package gnuplot :ensure t)

  (use-package ob
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((gnuplot . t))))
#+END_SRC

#+NAME: weight-data
#+BEGIN_SRC sh :results table
curl -s -H "Authorization: Bearer TOKEN" https://api.fitbit.com/1/user/USER_ID/body/weight/date/2018-06-09/2018-07-11.json | jq '.[][] | "\(.dateTime) \(.value)"' | sed 's/"//g'
#+END_SRC

#+RESULTS: weight-data
| 2018-06-09 | 65.753 |
| 2018-06-10 | 65.762 |
| 2018-06-11 | 65.771 |
| 2018-06-12 |  65.78 |
| 2018-06-13 | 65.789 |
| 2018-06-14 | 65.798 |
| 2018-06-15 | 65.807 |
| 2018-06-16 | 65.816 |
| 2018-06-17 | 65.825 |
| 2018-06-18 |  65.85 |
| 2018-06-19 |  65.96 |
| 2018-06-20 |   64.1 |
| 2018-06-21 |  65.64 |
| 2018-06-22 |  65.47 |
| 2018-06-23 | 65.515 |
| 2018-06-24 |  65.56 |
| 2018-06-25 | 65.605 |
| 2018-06-26 |  65.65 |
| 2018-06-27 |  65.18 |
| 2018-06-28 |  64.49 |
| 2018-06-29 |  64.49 |
| 2018-06-30 |  64.41 |
| 2018-07-01 |  64.33 |
| 2018-07-02 |  64.25 |
| 2018-07-03 |  64.17 |
| 2018-07-04 |  64.55 |
| 2018-07-05 |  64.39 |
| 2018-07-06 |  64.33 |
| 2018-07-07 |  65.06 |
| 2018-07-08 |  63.28 |
| 2018-07-09 |   63.4 |
| 2018-07-10 |  64.22 |
| 2018-07-11 |  63.95 |

Now feed the two column data to gnuplot.

#+BEGIN_SRC gnuplot :var data=weight-data :exports code :file images/fitbit-api-org-babel-and-gnuplot/weight.png
reset
set title "My recent weight"
set xdata time
set timefmt '%Y-%m-%d'
set format x "%d/%m/%y"
set term png
set xrange ['2018-06-09':'2018-07-11']
plot data u 1:2 with linespoints title 'Weight in Kg'
#+END_SRC

#+RESULTS:
#+ATTR_HTML: :width 75% :height 75%
[[file:images/fitbit-api-org-babel-and-gnuplot/weight.png]]

Fetching data and plotting through org babel and gnuplot is pretty sweet. I've barely scratched the surface. There's more at [[https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html][Org-babel-gnuplot]] and [[https://orgmode.org/worg/org-tutorials/org-plot.html][Plotting tables in Org-Mode using org-plot]]. Either way, this is another Emacs super power to keep in the toolbox.
* [2018-07-08 Sun] PIPESTATUS for all return codes
  :PROPERTIES:
  :CUSTOM_ID: pipestatus-for-all-return-codes
  :END:
From [[https://twitter.com/saruspete][@saruspete]]'s [[https://twitter.com/saruspete/status/1014801074794979335?s=12][tweet]], ${PIPESTATUS[@]} gives ya all piped commands' return codes:

#+BEGIN_SRC sh :results verbatim
  echo foo | grep bar | tr z a | cat
  echo ${PIPESTATUS[@]}
#+END_SRC

#+RESULTS:
: 0 1 0 0

* [2018-07-07 Sat] Emacs utilities for your OS
  :PROPERTIES:
  :CUSTOM_ID: emacs-utilities-for-your-os
  :END:
Narrowing utilities are a wonderful way of increasing productivity. I have a few workflows using Emacs's [[https://github.com/emacs-helm/helm][Helm]] framework.

There are great productivity boosters like [[https://www.alfredapp.com/][Alfred]] and [[https://qsapp.com/][Quicksilver]] for macOS, with batteries included.

If you're a tinkerer, you'd enjoy the powerful [[http://hammerspoon.org/][Hammerspoon]]. Like elisp gluing all things Emacs, Hammerspoon uses Lua to glue all things macOS. You can build your own narrowing utilities using [[http://www.hammerspoon.org/docs/hs.chooser.html][chooser]] and a little Lua.

#+BEGIN_SRC
  local chooser = hs.chooser.new(function(choice)
        hs.alert.show(choice['text'])
  end)

  chooser:choices({
        {
           ["text"] = "Alfred\n",
           ["subText"] = "macOS only\n",
        },
        {
           ["text"] = "Quicksilver\n",
           ["subText"] = "macOS only\n",
        },
        {
           ["text"] = "Hammerspoon\n",
           ["subText"] = "macOS only\n",
        },
        {
           ["text"] = "Emacs\n",
           ["subText"] = "is everywhere :)\n",
        },
  })
  chooser:show()
#+END_SRC

#+ATTR_HTML: :width 75% :height 75%
[[file:images/emacs-utilities-for-your-os/chooser.png]]

Howard Abrams's post on [[http://howardism.org/Technical/Emacs/capturing-content.html][Capturing Content for Emacs]] inspired me to look at gluing Emacs and macOS to launch my own cross-platform narrowing utilities.

I've also taken this opportunity to look at Oleh Krehel's wonderful completion package: [[https://github.com/abo-abo/swiper][Ivy]]. We can use it to build a macOS narrowing utility.

Ivy is remarkably easy to use. Turns out, [[http://oremacs.com/swiper/#api][ivy-read]] is all you need. A simple Emacs completion can be accomplished with little elisp.

#+BEGIN_SRC emacs-lisp
  (ivy-read "Hello ivy: "
            '("One "
              "Two "
              "Three "
              "Four "))
#+END_SRC

#+ATTR_HTML: :width 50% :height 50%
[[file:images/emacs-utilities-for-your-os/simple_ivy.png]]

Pretty nifty. Let's make this completion more accessible from the rest of the OS. To do so, we create a separate Emacs frame and make it pretty. We also want it to interact with the OS. We'll use /ivy-read/'s /:action/ to invoke a tiny bit of AppleScript.

Oh and we'll also use some funny quotes to tease ourselves about our beloved editor.

#+BEGIN_SRC emacs-lisp
  (with-current-buffer (get-buffer-create "*modal-ivy*")
    (let ((frame (make-frame '((auto-raise . t)
                               (background-color . "DeepSkyBlue3")
                               (cursor-color . "MediumPurple1")
                               (font . "Menlo 15")
                               (foreground-color . "#eeeeec")
                               (height . 20)
                               (internal-border-width . 20)
                               (left . 0.33)
                               (left-fringe . 0)
                               (line-spacing . 3)
                               (menu-bar-lines . 0)
                               (minibuffer . only)
                               (right-fringe . 0)
                               (tool-bar-lines . 0)
                               (top . 48)
                               (undecorated . t)
                               (unsplittable . t)
                               (vertical-scroll-bars . nil)
                               (width . 110)))))
      (set-face-attribute 'ivy-minibuffer-match-face-1 frame
                          :background nil
                          :foreground nil)
      (set-face-attribute 'ivy-minibuffer-match-face-2 frame
                          :background nil
                          :foreground "orange1")
      (set-face-attribute 'ivy-minibuffer-match-face-3 frame
                          :background nil
                          :foreground "orange1")
      (set-face-attribute 'ivy-minibuffer-match-face-4 frame
                          :background nil
                          :foreground "orange1")
      (set-face-attribute 'ivy-current-match frame
                          :background "#ffc911"
                          :foreground "red")
      (set-face-attribute 'minibuffer-prompt frame
                          :foreground "grey")
      (let ((ivy-height 20)
            (ivy-count-format ""))
        (ivy-read "Emacs acronyms: "
                  '(" Emacs: Escape-Meta-Alt-Control-Shift "
                    " Emacs: Eight Megabytes And Constantly Swapping "
                    " Emacs: Even a Master of Arts Comes Simpler "
                    " Emacs: Each Manual's Audience is Completely Stupified "
                    " Emacs: Eventually Munches All Computer Storage "
                    " Emacs: Eradication of Memory Accomplished with Complete Simplicity "
                    " Emacs: Easily Maintained with the Assistance of Chemical Solutions "
                    " Emacs: Extended Macros Are Considered Superfluous "
                    " Emacs: Every Mode Accelerates Creation of Software "
                    " Emacs: Elsewhere Maybe All Commands are Simple "
                    " Emacs: Emacs Makes All Computing Simple "
                    " Emacs: Emacs Masquerades As Comfortable Shell "
                    " Emacs: Emacs My Alternative Computer Story "
                    " Emacs: Emacs Made Almost Completely Screwed "
                    " Emacs: Each Mail A Continued Surprise "
                    " Emacs: Eating Memory And Cycle-Sucking "
                    " Emacs: Elvis Masterminds All Computer Software "
                    " Emacs: Emacs Makes A Computer Slow" )
                  :action (lambda (funny-quote)
                            (async-shell-command (format "osascript -e 'tell app \"System Events\" to display dialog \"%s\" buttons {\"OK\"}'" funny-quote)))
                  :unwind (lambda ()
                            (shell-command "/Applications/Hammerspoon.app/Contents/Resources/extensions/hs/ipc/bin/hs -c 'backFromEmacs()'")
                            (delete-frame)
                            (other-window 1))))))
#+END_SRC

#+ATTR_HTML: :width 100% :height 100%
[[file:images/emacs-utilities-for-your-os/ivy_frame.gif]]

So where's all this going? I wrote a utility to extract all links from [[https://raw.githubusercontent.com/xenodium/xenodium.github.io/master/index.org][this page's org file]] and make them easily searchable from anywhere on macOS by invoking *⌥-W*.

The keys are bound using Lua, Hammerspoon, and emacsclient. This works well on macOS, but there are alternatives for other operating systems.

#+BEGIN_SRC
  hs.execute("emacsclient -ne \""..elisp.."\" -s /tmp/emacs*/server")
#+END_SRC

Here's the resulting utility in action:

#+ATTR_HTML: :width 100% :height 100%
[[file:images/emacs-utilities-for-your-os/ivy_links.gif]]

These integrations look promising. They enable me to bring cross-platform Emacs utilities into areas I hadn't considered.

* [2018-07-01 Sun] Web serving tools bookmarks
  :PROPERTIES:
  :CUSTOM_ID: web-serving-tools-bookmarks
  :END:
:MODIFIED:
[2021-06-05 Sat]
:END:
- [[https://certbot.eff.org/][Certbot: Automatically enable HTTPS on your website, deploying Let's Encrypt certificates]].
- [[https://www.timdoug.com/log/2018/08/04/#wireguard_macos][How to configure WireGuard to tunnel traffic from a macOS client through a Debian server with IPv4 and IPv6]].
- [[http://irreal.org/blog/?p=7306][HTTPS Is Easy (Irreal)]].
- [[https://news.ycombinator.com/item?id=17689188][I made my own WireGuard VPN server (Hacker News)]].
- [[https://jsonapi.org/][JSON:API — A specification for building APIs in JSON]].
- [[https://mirage.io/][MirageOS: high-performance network applications across a variety of cloud computing and mobile platforms]].
- [[https://nginxconfig.io/][nginxconfig.io]].
- [[https://alex.dzyoba.com/blog/nginx-features-for-developers/][Nice nginx features for developers | There is no magic here]].
- [[https://idiallo.com/blog/handling-1-million-web-request][Poor man's way of handling 1.3 million web request]].
- [[https://www.getpostman.com/][Postman (API Development Environment)]].
- [[https://tools.suckless.org/quark/][quark: an extremely small and simple HTTP GET/HEAD-only web server for static content (suckless.org tools)]].
- [[https://github.com/pirate/wireguard-docs][The Missing Wireguard Documentation]].
- [[https://dev.to/ghardin137/web-authentication-for-actual-humans-part-two-ea6][Web Authentication for Actual Humans, Part Two - DEV Community]].
* [2018-06-24 Sun] URL shortener bookmarks
  :PROPERTIES:
  :CUSTOM_ID: url-shortener-bookmarks
  :END:
- [[https://github.com/kellegous/go][go: Another Google-like Go short link service]].
- [[https://github.com/issmirnov/zap][zap: Blazing fast web shortcuts]].
* [2018-06-17 Sun] Trying out mu4e with mbsync
  :PROPERTIES:
  :CUSTOM_ID: trying-out-mu4e-with-mbsync
  :END:
The email fun in Emacs continues. After a few weeks since I [[#trying-out-mu4e-and-offlineimap][started using mu4e and offlineimap]], I'm sold. Both are awesome. [[http://isync.sourceforge.net/mbsync.html][Mbsync]] is an [[http://www.offlineimap.org/][offlineimap]] alternative. Despite resyncing all my mail, the transition was fairly smooth. Here's how...

** Install isync (for mbsync)

#+BEGIN_SRC sh
  brew install isync
#+END_SRC

** Configure mbsync

Mbsync uses ~~/.mbsyncrc~ for configuration. Migrating [[#trying-out-mu4e-and-offlineimap][~/.offlineimaprc]] to ~~/.mbsyncrc~ looks like:

#+BEGIN_SRC conf
  IMAPAccount Personal
  Host some.imap.host.com
  User your_user_name
  PassCmd "gpg --quiet --batch -d ~/.offlineimap_accountname.gpg"
  Port 993
  SSLType IMAPS
  AuthMechs Login
  CertificateFile  ~/.offlineimapcerts.pem
  # My IMAP provider doesn't handle concurrent IMAP commands.
  PipelineDepth 1

  IMAPStore Personal-remote
  Account Personal

  MaildirStore Personal-local
  Path ~/IMAP/Personal/
  Inbox ~/IMAP/Personal/INBOX

  Channel Personal
  Master :Personal-remote:
  Slave :Personal-local:
  Patterns *
  Create Slave
  Sync All
  Expunge Both
  SyncState *
#+END_SRC
** No concurrent IMAP commands supported

My IMAP provider doesn't handle concurrent IMAP commands. [[https://kdecherf.com/blog/2017/05/01/mbsync-and-office-365/][mbsync and Office 365]] had the answer:

#+BEGIN_SRC conf
  PipelineDepth 1
#+END_SRC

** Initial sync

Run initial from the command line sync:

#+BEGIN_SRC sh
  mbsync -Va
#+END_SRC

While syncing my largest inbox, it sometimes received an unexpected EOF error:

#+BEGIN_SRC
  IMAP error: unexpected EOF from some.imap.host.com (1.2.3.4:993)
#+END_SRC

First few times, I restarted the syncing manually, but then used a loop to automatically restart it.

Bash loops:

#+BEGIN_SRC sh
  while true; do mbsync -V Personal; sleep 5; done
#+END_SRC

#+BEGIN_SRC sh
  for i in {1..5}; do mbsync -V Personal; sleep 5; done
#+END_SRC

Eshell loop:

#+BEGIN_SRC sh
  for i in (number-sequence 1 10) {mbsync -V Personal; sleep 5}
#+END_SRC

** Create mu index

Reindex using mu, but first remove existing index for offlineimap messages:

#+BEGIN_SRC sh
  rm -rf ~/.mu
#+END_SRC

Ok, do index now:

#+BEGIN_SRC sh
  mu index --maildir=~/IMAP
#+END_SRC

** Mu4e tweaks

The /get mail/ command should now point to mbsync.

#+BEGIN_SRC emacs-lisp
  (csetq mu4e-get-mail-command "mbsync -Va")
#+END_SRC

I had issues with duplicate IDs after moving and deleting messages from mu4e. [[http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/][Migrating from offlineimap to mbsync for mu4e]] had the answer:

#+BEGIN_SRC emacs-lisp
  (csetq mu4e-change-filenames-when-moving t)
#+END_SRC

** Helpful references
- [[https://webgefrickel.de/blog/a-modern-mutt-setup][A modern mutt setup with neomutt, mbsync, msmtp and mu — part one | webgefrickel]].
- [[http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/][Migrating from offlineimap to mbsync for mu4e | Pragmatic Emacs]].
- [[https://copyninja.info/blog/email_setup.html][My personal Email setup - Notmuch, mbsync, postfix and dovecot]].
- [[https://github.com/jeremy-compostella/org-msg/blob/master/README.org][org-msg: Compose and reply to emails in a Outlook HTML friendly style]].
- [[http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html][Reading IMAP Mail in Emacs on OSX]].

* [2018-06-15 Fri] Sticky function keys on touch bar
  :PROPERTIES:
  :CUSTOM_ID: sticky-function-keys-on-touch-bar
  :END:
Visible (and sticky) function keys are not the touch bar default for Emacs. Let's change that:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/sticky-function-keys-on-touch-bar/touchbar_function_keys.png]]

* [2018-06-13 Wed] GNU find on macOS
  :PROPERTIES:
  :CUSTOM_ID: gnu-find-on-macos
  :END:
At times, you may need GNU versions of command line utilities on macOS. For example, GNU find.

As usual, Homebrew saves the day. Install with:

#+BEGIN_SRC sh
  brew install findutils
#+END_SRC

Unless you install with --with-default-names (I don't), GNU utilities will be prefixed with a "g".

#+BEGIN_SRC sh :results verbatim
  gfind --version
#+END_SRC

#+RESULTS:
: find (GNU findutils) 4.6.0
: Copyright (C) 2015 Free Software Foundation, Inc.
: License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
: This is free software: you are free to change and redistribute it.
: There is NO WARRANTY, to the extent permitted by law.
:
: Written by Eric B. Decker, James Youngman, and Kevin Dalley.
: Features enabled: D_TYPE O_NOFOLLOW(enabled) LEAF_OPTIMISATION FTS(FTS_CWDFD) CBO(level=2)

If you need more, there are others:

#+BEGIN_SRC sh
  brew install binutils
  brew install diffutils
  brew install ed
  brew install findutils
  brew install gawk
  brew install gnu-indent
  brew install gnu-sed
  brew install gnu-tar
  brew install gnu-which
  brew install gnutls
  brew install grep
  brew install gzip
  brew install screen
  brew install watch
  brew install wdiff --with-gettext
  brew install wget
#+END_SRC

* [2018-06-13 Wed] PlantUML bookmarks
  :PROPERTIES:
  :CUSTOM_ID: plantuml-bookmarks
  :END:
  :MODIFIED:
  [2020-06-27 Sat]
  :END:
- [[https://scripter.co/notes/plantuml][Collection of PlantUML snippets from Scripter.co]].
- [[https://real-world-plantuml.com/][Real World PlantUML]].
- [[https://crashedmind.github.io/PlantUMLHitchhikersGuide/][Welcome to The Hitchhiker’s Guide to PlantUML!]].
* [2018-05-29 Tue] Adding mu4e maildirs extension
  :PROPERTIES:
  :CUSTOM_ID: adding-mu4e-maildirs-extension
  :END:
Continuing the mu4e fun, added mu4e-maildirs-extension to display a mail dirs summary.

#+ATTR_HTML: :width 75% :height 75%
[[file:images/adding-mu4e-maildirs-extension/mu4e_maildirs_extension.png]]

* [2018-05-28 Mon] Trying out mu4e and offlineimap
  :PROPERTIES:
  :CUSTOM_ID: trying-out-mu4e-and-offlineimap
  :END:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/trying-out-mu4e-and-offlineimap/mu4e.png]]

Managing Email from Emacs. Surely that's crazy-talk, but hey... let's give it a try.

** Install offlineimap
Need to sync via imap. Use offlineimap. I'm on macOS, so homebrew is king for installing:

#+BEGIN_SRC sh
  brew install offlineimap
#+END_SRC

Before can configure offlineimap, we'll need to handle a few things first.

** Get a cert fingerprint

Use openssl for getting a certificate fingerprint. From offlineimap's [[http://www.offlineimap.org/doc/FAQ.html#view-the-fingerprint][FAQ:]]

#+BEGIN_SRC sh
  SSL_CERT_DIR="" openssl s_client -connect imap.migadu.com:993 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -text -in /dev/stdin
#+END_SRC

Should give you something like:

#+BEGIN_QUOTE
  SHA1 Fingerprint=AA:BB:CC:DD:EE:DD:FF:AA:00:AA:2A:AA:AA:AA:A8:20:80:AA:A2:AA
#+END_QUOTE

** Encrypt password
Offlineimap can read passwords in plain text in its .offlineimaprc config file, but that's yuckie. Let's encrypt the password and use gnupg for that. Install it:

#+BEGIN_SRC sh
  brew install gnupg
#+END_SRC

If you haven't already, generate a key

#+BEGIN_SRC sh
  gpg --full-gen-key
#+END_SRC

Generate an offlineimap account password file.

#+BEGIN_SRC sh
  echo "YourPassword" | gpg --encrypt --recipient "Your Name" -o ~/.offlineimap_accountname.gpg
#+END_SRC

** Python password  wrapper

Based on Fabian's [[https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html][Encrypt OfflineIMAP and msmtp password with GnuPG]], I created ~/.read_password.py with:

#+BEGIN_SRC python
  import os
  import subprocess

  def read_password(path):
    return subprocess.check_output(["gpg\n", "--quiet\n", "--batch\n", "-d\n", os.path.expanduser(path)]).strip()
#+END_SRC

ps. Alternatively, see [[http://stevelosh.com/blog/2012/10/the-homely-mutt/#retrieving-passwords][The homely Mutt]]'s section to store password in macOS's keychain.

** Configure offlineimap

Offlineimap uses ~/.offlineimaprc for configuration. We now have all we need to put the configuration together:

#+BEGIN_SRC conf
[general]
accounts = Personal

# Load this python file.
pythonfile = ~/.read_password.py

[Account Personal]
localrepository = Personal-Local

remoterepository = Personal-Remote

# After syncing, let mu index it.
postsynchook = mu index --maildir ~/stuff/active/Mail

# Sync imap every 5 minutes.
autorefresh = 5

# Alternate between 10 quick syncs and full syncs.
quick = 10

[Repository Personal-Local]
type = Maildir
localfolders = ~/stuff/active/Mail/Personal

[Repository Personal-Remote]
type = IMAP
remotehost = some.imap.host.com
remoteuser = your_user_name

# Use function defined in .read_password.py to read the password.
remotepasseval = read_password("~/.offlineimap_personal_account_password.gpg")

# Use the SHA1 fingerprint retrieved with openssl.
cert_fingerprint = aabbccddeeddffaa00aa2aaaaaaaa82080aaa2aa
#+END_SRC

*** Cert file

You can use macOS's certificates from Keychain Access -> System Roots -> Certificates, select all, and ⌘-⇧-e (for export items). Save to ~/certs.pem and use offlineimap configutation:

#+BEGIN_QUOTE
sslcacertfile = /path/to/certs.pem
#+END_QUOTE

Another option is executing lib/mk-ca-bundle.pl from curl's tarball to generate ca-bundle.crt, using certdata.txt from Mozilla's source tree.

** Install mu4e
Manually modified mu4e recipe to pick up my Emacs binary. TIL about homebrew's edit command:

#+BEGIN_SRC sh
  brew edit mu
#+END_SRC

Changed the one line:

#+BEGIN_QUOTE
- ENV["EMACS"] = "no" if build.without? "emacs"
+ ENV["EMACS"] = "/Users/alvaro/homebrew/Cellar/emacs-plus/26.1-rc1_2/bin/emacs"
#+END_QUOTE

Finally installed mu4e:

#+BEGIN_SRC sh
  brew install mu
#+END_SRC

** Configure mu4e

Lastly, configure mu4e:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path
               (expand-file-name "~/homebrew/share/emacs/site-lisp/mu/mu4e"))
  (use-package mu4e
    :config
    ;; Update mail using 'U' in main view:
    (setq mu4e-get-mail-command "offlineimap")
    (setq mu4e-view-show-addresses t)
    (setq mu4e-attachment-dir (expand-file-name "~/Downloads/"))
    (setq mu4e-maildir "path/to/Mail")
    (setq mu4e-html2text-command "w3m -T text/html") ;; alternatively "textutil -stdin -format html -convert txt -stdout"
    (setq mu4e-user-mail-address-list '("myself@domain1.com"
                                        "myself@domain2.com"))
    (setq mu4e-context-policy 'pick-first)
    (setq mu4e-compose-context-policy 'always-ask)
    (setq mu4e-contexts
          (list
           (make-mu4e-context
            :name "domain1"
            :enter-func (lambda () (mu4e-message "Entering context myself@domain1.com"))
            :leave-func (lambda () (mu4e-message "Leaving context myself@domain1.com"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "myself@domain1.com")))
            :vars '((user-mail-address . "myself@domain1.com")
                    (user-full-name . "My name")
                    (mu4e-sent-folder . "/Domain1/Sent")
                    (mu4e-drafts-folder . "/Domain1/Drafts")
                    (mu4e-trash-folder . "/Domain1/Trash")
                    (mu4e-compose-signature . nil)
                    (mu4e-compose-format-flowed . nil)
                    (smtpmail-smtp-user . "myself@domain1.com")
                    (smtpmail-smtp-server . "smtp.domain1.com")
                    (smtpmail-smtp-service . 587)))
           (make-mu4e-context
            :name "domain2"
            :enter-func (lambda () (mu4e-message "Entering context myself@domain2.com"))
            :leave-func (lambda () (mu4e-message "Leaving context myself@domain2.com"))
            :match-func (lambda (msg)
                          (when msg
                            (mu4e-message-contact-field-matches
                             msg '(:from :to :cc :bcc) "myself@domain2.com")))
            :vars '((user-mail-address . "myself@domain2.com")
                    (user-full-name . "My name")
                    (mu4e-sent-folder . "/Domain2/Sent")
                    (mu4e-drafts-folder . "/Domain2/Drafts")
                    (mu4e-trash-folder . "/Domain2/Trash")
                    (mu4e-compose-signature . nil)
                    (mu4e-compose-format-flowed . nil)
                    (smtpmail-smtp-user . "myself@domain2.com")
                    (smtpmail-smtp-server . "smtp.domain2.com")
                    (smtpmail-smtp-service . 587))))))

  (use-package smtpmail
    :config
    (setq smtpmail-stream-type 'starttls)
    (setq smtpmail-debug-info t)
    (setq smtpmail-warn-about-unknown-extensions t)
    (setq smtpmail-queue-mail t)
    (setq smtpmail-default-smtp-server nil)
    ;; Created with mu mkdir path/to/Mail/queue
    ;; Also avoid indexing.
    ;; touch path/to/Mail/queue/.noindex
    (setq smtpmail-queue-dir "path/to/Mail/queue/cur"))

  (use-package message
    :config
    (setq message-send-mail-function 'smtpmail-send-it))
#+END_SRC
** Authinfo

Create an ~/.authinfo file for sendmail authentication with:

#+BEGIN_SRC
machine smtp.host1.com login account1@host1.com password somepassword1
machine smtp.host2.com login account2@host2.com password somepassword2
#+END_SRC

Encrypt ~/.authinfo with M-x epa-encrypt-file. Keep ~/.authinfo.gpg and delete ~/.authinfo.

** Mu4e helpful references
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-][A Complete Guide to Email in Emacs using Mu and Mu4e]].
- [[https://www.reddit.com/r/emacs/comments/5fkq7r/a_year_with_notmuch_mail_a_superfast_email_client/][A year with Notmuch mail - a super-fast email client available on Emacs]].
- [[https://dev.to/shrysr/archaic-text-based-email-clients-rock-3flm][Archaic: text based email clients rock - DEV Community (lots of great links)]].
- [[https://gist.github.com/areina/3879626][areina's Manage your email in emacs with mu4e]].
- [[https://notanumber.io/2016-10-03/better-email-with-mu4e/][Better Email with mu4e (NaN)]].
- [[https://vxlabs.com/2014/06/06/configuring-emacs-mu4e-with-nullmailer-offlineimap-and-multiple-identities/][Configuring Emacs mu4e with nullmailer, offlineimap and multiple identities]].
- [[http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html][Drowning in Email; mu4e to the Rescue]].
- [[https://ebzzry.io/en/emacs-mail/][Ebzzry: Setting up Mail in Emacs]].
- [[http://www.kirang.in/2014/11/13/emacs-as-email-client-with-offlineimap-and-mu4e-on-osx][Emacs as email client with offlineimap and mu4e on OS X]].
- [[https://zmalltalker.com/linux/mu.html][Email done right (mu)]].
- [[https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html][Encrypt OfflineIMAP and msmtp password with GnuPG]].
- [[https://etienne.depar.is/emacs.d/mu4e.html][Etienne's Mu4e customization]].
- [[https://github.com/OfflineIMAP/imapfw][GitHub - OfflineIMAP/imapfw: imapfw (IMAP/mail framework)]].
- [[https://github.com/kensanata/ggg][Gmail Gnus GPG Guide (GGGG)]].
- [[https://martinralbrecht.wordpress.com/2016/05/30/handling-email-with-emacs/][Handling Email with Emacs]] (helm included).
- [[https://www.reddit.com/r/emacs/comments/5hfcid/i_got_mu4e_working/][I got mu4e working! (Reddit)]].
- [[https://blog.danielgempesaw.com/post/43467552978/installing-mu-and-mu4e-with-homebrew-with-emacs][Installing mu and mu4e with homebrew with emacs]].
- [[https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org][Iqbal Ansari's mail config]].
- [[https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org][iqbalansari/dotEmacs: calendar integration]].
- [[https://jherrlin.github.io/posts/emacs-mu4e/][Mail in Emacs with mu4e and mbsync (jherrlin)]].
- [[http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/][Master your inbox with mu4e and org-mode]].
- [[https://github.com/djcb/mu][Mu's github mirror]].
- [[http://www.djcbsoftware.nl/code/mu][Mu's page]].
- [[http://wenshanren.org/?p=111][mu4e: an E-mail Client for Emacs]].
- [[https://github.com/danielfleischer/mu4easy][mu4easy: mu4e + mbsync configuration for multiple accounts.]].
- [[http://rudolfochrist.github.io/blog/2015/03/21/offlineimap-with-ssl-files-on-osx/][OfflineIMAP with SSL files on OSX - Sebastian Christ]].
- [[https://news.ycombinator.com/item?id=14221501][OfflineIMAP: sync and backup tool for IMAP (Hacker News) and mbsync in comments]].
- [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][Practical guide to use Gnus with Gmail]].
- [[http://pragmaticemacs.com/mu4e-tutorials/][Pragmatic Emacs's mu4e tutorials]].
- [[http://prodissues.com/2016/02/adding-mu4e-support-to-emacs.html][Prodissues: Adding mu4e Support To Emacs]].
- [[http://prodissues.com/2016/02/emacs-gpg-for-dummies.html][Prodissues: Emacs GPG For Dummies]].
- [[http://ict4g.net/adolfo/notes/2014/12/27/emacs-imap.html][Reading IMAP Mail in Emacs on OSX]].
- [[https://vxlabs.com/2019/07/03/send-queued-mails-in-background-with-mu4e/][Sending queued mails in the background with mu4e]].
- [[https://aliquote.org/post/setting-up-mu4e-1-0-c/][Setting Up Mu4e 1.0 C - aliquot]].
- [[https://dataswamp.org/~solene/2018-05-22-mu4esmtp.html][Solene's post: Sending mail with mu4e]].
- [[https://lars.ingebrigtsen.no/2014/12/01/the-emacs-network-security-manager][The Emacs Network Security Manager]].
- [[http://tech.memoryimprintstudio.com/the-ultimate-emailing-agent-with-mu4e-and-emacs][The Ultimate Emailing Agent with Mu4e and Emacs]].
- [[https://www.reddit.com/r/emacs/comments/8q84dl/tip_how_to_easily_manage_your_emails_with_mu4e/][TIP: How to easily manage your emails with mu4e (Reddit)]].
- [[https://etienne.depar.is/a-ecrit/post/2016/09/23/Two-custom-headers-for-mu4e][Two custom headers for mu4e - Étienne Deparis]].
- [[https://www.reddit.com/r/emacs/comments/73a3gp/using_emacs_to_read_gmail/][Using Emacs to read gmail (Emacs subreddit)]].
- [[http://www.brool.com/post/using-mu4e/][Using mu4e (Brool blog)]].
- [[https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el][Zamansky mu4e's sample config]].
- [[https://www.youtube.com/watch?v=newRHXKm4H4][Zamansky's video on mu4e]].

* [2018-05-24 Thu] Transparent Emacs titlebars on macOS
  :PROPERTIES:
  :CUSTOM_ID: transparent-emacs-titlebars-on-macos
  :END:
Happy with [[https://github.com/d12frosted/homebrew-emacs-plus][Emacs Plus]] builds on Mac. You get some eye-candy bonuses like transparent titlebars.

To install:

#+BEGIN_SRC sh
  brew tap d12frosted/emacs-plus
  brew install emacs-plus --without-spacemacs-icon
#+END_SRC

Config:

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (add-to-list 'default-frame-alist '(ns-appearance . dark)) ; nil for dark text
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))
#+END_SRC

#+ATTR_HTML: :width 75% :height 75%
[[file:images/transparent-emacs-titlebars-on-macos/transparent-emacs-titlebars-macos.png]]
* [2018-05-24 Thu] Lunette: Like Spectacle but for Hammerspoon
  :PROPERTIES:
  :CUSTOM_ID: lunette-like-spectacle-but-for-hammerspoon
  :END:
Came across [[https://github.com/scottwhudson/Lunette][Lunette]]. Gives ya Spectacle Keybindings for Hammerspoon.
* [2018-05-23 Wed] Train Emacs to open files externally
  :PROPERTIES:
  :CUSTOM_ID: train-emacs-to-open-files-externally
  :END:
TIL about the [[https://bitbucket.org/jpkotta/openwith][openwith]] package. It enables Emacs to defer to external programs for certain files. You choose which ones. Neat.

#+BEGIN_SRC emacs-lisp
  (use-package openwith :ensure t
    :config
    (csetq openwith-associations
           '(("\\.\\(mp4\\|mp3\\|webm\\|avi\\|flv\\|mov\\)$" "open" (file))))
    (openwith-mode 1))
#+END_SRC
* [2018-05-22 Tue] Show hidden files in Finder
  :PROPERTIES:
  :CUSTOM_ID: show-hidden-files-in-finder
  :END:
#+BEGIN_SRC sh
  defaults write com.apple.finder AppleShowAllFiles TRUE
  killall Finder
#+END_SRC
* [2018-05-22 Tue] Ejecting USB drives on Synology
  :PROPERTIES:
  :CUSTOM_ID: ejecting-usb-drives-on-synology
  :END:
  For posterity:
#+BEGIN_QUOTE
  Control panel > External devices > USB Disk 1 > Eject
#+END_QUOTE
* [2018-05-21 Mon] Remounting Synology encrypted share
  :PROPERTIES:
  :CUSTOM_ID: remounting-synology-encrypted-share
  :END:
  Had been a while since I did this... for posterity:
#+BEGIN_QUOTE
  Control panel > Shared Folder > Encryption > Mount
#+END_QUOTE
* [2018-05-20 Sun] Synology user had no home
  :PROPERTIES:
  :CUSTOM_ID: synology-user-had-no-home
  :END:
Upon ssh'ing to a Synology box, the user had no home.

#+BEGIN_QUOTE
  Could not chdir to home directory /var/services/homes/someone: No such file or directory
#+END_QUOTE

Fixed via:

#+BEGIN_QUOTE
Control Panel > User > Advanced > User Home > [x] Enable user home service
#+END_QUOTE

* [2018-04-30 Mon] Pre-commit hooks to save you from yourself
:PROPERTIES:
:CUSTOM_ID: pre-commit-hooks-to-save-you-from-yourself
:END:
Wanted to try out some code, but needed to ensure never checked in. Git pre-commit hooks are handy in this space. Add the following script to search for either @COMMITFAIL or @NOCOMMIT in the staged files. If found, attempts to commit will fail.

Based on https://gist.github.com/rex/223b4be50285f6b8b3e06dea50d15887:

#+BEGIN_SRC sh
  #!/bin/bash

  set -o nounset
  set -o errexit

  echo "Arguments:"
  echo "$@"
  echo "---"

  readonly FILES_PATTERN='(\..+)?$'
  readonly FORBIDDEN='(@?NOCOMMIT|@?COMMITFAIL)'

  if ( git diff --cached --name-only | grep -E "$FILES_PATTERN" | xargs grep -E --with-filename -n "$FORBIDDEN" ); then
    echo "ERROR: @COMMITFAIL or @NOCOMMIT found. Exiting to save you from yourself."
    exit 1
  fi
#+END_SRC

Save to a file and create a symbolic link to your .git/hooks directory:

#+BEGIN_SRC sh
  ln -s ../../git/commit-fail-pre-hook.sh .git/hooks/pre-commit
#+END_SRC

* [2018-04-19 Thu] Azores travel bookmarks
:PROPERTIES:
:CUSTOM_ID: azores-travel-bookmarks
:END:
:MODIFIED:
[2018-05-08 Tue]
:END:
- [[http://www.fodors.com/go-list/2013/azores-islands/][Azores islands]].
- [[https://github.com/schilken/dot-hammerspoon][My configuration with init.lua and the require()ed modules]].
- [[http://www.lonelyplanet.com/travel-tips-and-articles/this-other-eden-the-azores-europes-secret-islands-of-adventure][This other Eden: the Azores, Europe's secret islands of adventure]].
* [2018-04-19 Thu] Debugging Emacs binary
:PROPERTIES:
:CUSTOM_ID: debugging-emacs-binary
:END:

From [[https://emacs.stackexchange.com/questions/14354/how-do-i-debug-an-emacs-crash][How do I debug an emacs crash? (Emacs Stack Exchange)]], disable optimizations when configuring and build:

#+BEGIN_SRC sh
  CFLAGS="-O0 -g3" ./configure ...
  make
#+END_SRC

And good 'ol gdb (lldb works too):

#+BEGIN_SRC sh
  gdb ../nextstep/Emacs.app/Contents/MacOS/Emacs
#+END_SRC

** Reference
    - [[https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/DEBUG][etc/DEBUG: Debugging GNU Emacs]].

* [2018-04-19 Thu] Paper less bookmarks
:PROPERTIES:
:CUSTOM_ID: paperless-bookmarks
:END:
:MODIFIED:
[2018-05-26 Sat]
:END:
- [[https://github.com/danielquinn/paperless][danielquinn/paperless: Scan, index, and archive all of your paper documents]].
- [[http://www.karl-voit.at/2015/04/05/digitizing-paper/][Digitizing All Your Paper Stuff]].
- [[https://www.amazon.com/Fujitsu-ScanSnap-iX500-Duplex-Scanner/dp/B01G3JYVYM/ref=dp_ob_title_ce][Fujitsu ScanSnap iX500 Color Duplex Desk Scanner for Mac and PC]].
- [[http://www.jamierubin.net/2013/04/30/going-paperless-scanning-to-evernote-revisited/][Going Paperless: Scanning to Evernote, Revisited | Jamie Todd Rubin]].
- [[https://github.com/novoid/guess-filename.py][guess-filename.py: Derive a file name according to old file name cues and/or PDF file content]].
- [[http://www.noodlesoft.com/][Hazel for document/download management]].
- [[http://blog.matt-swain.com/post/26419042500/installing-tesseract-ocr-on-mac-os-x-lion][Installing Tesseract OCR on Mac OS X Lion]].
- [[http://irreal.org/blog/?p=5935][Paperless | Irreal]].
- [[http://solutions.weblite.ca/pdfocrx/][PDF OCR X - Mac & Windows OCR Software to convert PDFs and Images to Text]].
- [[http://www.documentsnap.com/batch-ocr-mac-fujitsu-scansnap/][Video: Batch OCR With The Mac Fujitsu ScanSnap]].
* [2018-04-18 Wed] Bologna travel bookmarks
:PROPERTIES:
:CUSTOM_ID: bologna-travel-bookmarks
:END:
- Il Cannone restaurant.
* [2018-04-17 Tue] Grep through pdfs
:PROPERTIES:
:CUSTOM_ID: grep-through-pdfs
:END:
Late to the party, but investing in going paperless. Got a scanner with OCR, which generates searchable pdfs. If I could only grep through them...

#+BEGIN_SRC sh
  brew install pdfgrep
#+END_SRC

Balance restored.
* [2018-04-14 Sat] Hammerspoon bookmarks
:PROPERTIES:
:CUSTOM_ID: hammerspoon-bookmarks
:END:
:MODIFIED:
[2019-04-22 Mon]
:END:
- [[https://github.com/peterpme/dotfiles/blob/master/hammerspoon/grid.lua][dotfiles/grid.lua at master]] for simple functions to resize windows.
- [[https://gist.github.com/justintanner/71d640be159c2a76e85d5196cf22e98a][Emacs keys everywhere Hammerspoon Script]].
- [[http://zzamboni.org/post/getting-started-with-hammerspoon/][Getting Started With Hammerspoon (by Diego Martín Zamboni)]].
- [[https://github.com/agzam/spacehammer][Hammerspoon config inspired by Spacemacs]].
- [[http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-1/][Just Enough Lua to Be Productive in Hammerspoon, Part 1]].
- [[http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-2/][Just Enough Lua to Be Productive in Hammerspoon, Part 2]].
- [[https://github.com/anandpiyer/.dotfiles/blob/fb7bdf5d6382515f36587f2ada83330d83983624/.hammerspoon/init.lua#L200][launchOrFocusByBundleID]] for global key bindings (there are Emacs goodies there too).
- [[https://github.com/schilken/dot-hammerspoon][My configuration with init.lua and the require()ed modules]].
- [[http://www.hammerspoon.org/Spoons/Seal.html][Seal]]. Helm-like for hammerspoon.
- [[https://blog.kalis.me/setup-hyper-key-hammerspoon-macos/][Set up a Hyper Key with Hammerspoon on macOS]].
- [[https://github.com/asmagill/hammerspoon-config/blob/07ec892ab1351d2a7659d802e4cbfa8e8a0d5702/_scratch/zerobrane.lua][ZeroBrane completion]] and [[https://github.com/cmsj/hammerspoon-config/blob/master/init.lua][here]] also.
* [2018-04-14 Sat] Options to reduce Go binary size
:PROPERTIES:
:CUSTOM_ID: options-to-reduce-go-binary-size
:END:
A Hacker News's thread [[https://news.ycombinator.com/item?id=16834181][Go gets preliminary WebAssembly support]] has a couple of tips to reduce binaries compiled with Go.

#+BEGIN_SRC sh
  go build -ldflags=-s
#+END_SRC

[[https://upx.github.io/][UPX]] (Ultimate Packer for eXecutables) packs the binary further.

#+BEGIN_SRC sh
  upx --ultra-brute
#+END_SRC
* [2018-04-09 Mon] Trying out tesseract
:PROPERTIES:
:CUSTOM_ID: trying-out-tesseract
:END:
As part of going paperless, looking into OCR. Trying out tesseract.

Install

#+BEGIN_SRC sh
  $ brew install gs
  $ brew install imagemagick
  $ brew install tesseract
#+END_SRC

#+BEGIN_SRC sh
  $ convert -density 300 -depth 8 receipt.pdf receipt.png
  $ tesseract receipt.png receipt.png.txt
#+END_SRC

* [2018-04-08 Sun] Sapporo travel bookmarks
:PROPERTIES:
:CUSTOM_ID: sapporo-travel-bookmarks
:END:
:MODIFIED:
[2021-01-02 Sat]
:END:
- [[https://foodle.pro/restaurants/sapporo/175-0-deno-dandan-noodles][175 ° DENO Dandan Noodles, Sapporo]].
- [[https://www.vitra.com/en-gb/magazine/details/the-hill-of-the-buddha][The Hill of the Buddha]].
* [2018-04-08 Sun] Gif bookmarks
:PROPERTIES:
:CUSTOM_ID: gif-bookmarks
:END:
:MODIFIED:
[2020-06-17 Wed]
:END:
- [[https://takinginitiative.wordpress.com/2020/03/07/an-idiots-guide-to-animation-compression/][An idiot’s guide to animation compression | Taking Initiative]].
- [[https://github.com/nwtgck/gif-progress/blob/develop/README.md][gif-progress: Attach progress bar to animated GIF]].
- [[https://gif.ski/][gifski — highest-quality GIF converter]].
- [[https://github.com/keycastr/keycastr][keycastr: an open-source keystroke visualizer]].
- [[https://github.com/phw/peek][phw/peek: Simple animated GIF screen recorder for Linux]].
* [2018-04-08 Sun] Trying out ShellCheck
:PROPERTIES:
:CUSTOM_ID: trying-out-shellcheck
:END:
[[https://github.com/koalaman/shellcheck][ShellCheck]] gives you automatic warnings/suggestions in bash/sh shell scripts.

#+BEGIN_SRC sh
  $ brew install shellcheck
#+END_SRC

Bonus: If using Emacs's [[https://github.com/flycheck/flycheck][flycheck]], you get ShellCheck support out of the box.
* [2018-04-08 Sun] Image editing bookmarks
:PROPERTIES:
:CUSTOM_ID: image-editing-bookmarks
:END:
:MODIFIED:
[2020-07-11 Sat]
:END:
- [[https://news.ycombinator.com/item?id=17748266][Exif.tools – A multimedia file metadata tool (Hacker News)]].
- [[https://news.ycombinator.com/item?id=16668254][Fred's ImageMagick Scripts (Hacker News)]].
- [[https://linuxhint.com/howto_crop_gimp/][How to crop in GIMP (Linux Hint)]].
- [[https://linuxhint.com/imagemagick_sharpen_image/][ImageMagick to Sharpen an Image – Linux Hint]].
- [[https://news.ycombinator.com/item?id=23789934][Jpeg2png: Silky smooth JPEG decoding – no more artifacts (2016) | Hacker News]].
- [[https://twitter.com/pidybi/status/1278590835194564608][Make your own meme image using Imagemagick]].
- [[https://news.ycombinator.com/item?id=10222524][The Art of PNG Glitch (Hacker News)]].
- [[http://ucnv.github.io/pnglitch/][The Art of PNG Glitch]].
* [2018-04-05 Thu] Buying matcha powder online
:PROPERTIES:
:CUSTOM_ID: buying-matcha-powder-online
:END:

From Reddit's [[https://www.reddit.com/r/tea/comments/6qbh4l/matcha/][thread]]:

- https://yunomi.life
- https://shop.ippodo-tea.co.jp/kyoto/shopf/index.html
- https://www.o-cha.com
- http://hojotea.com/categ_e/viewe.htm
- http://yuuki-cha.com
- http://www.hibiki-an.com/index.php
- http://www.thes-du-japon.com/index.php?main_page=index
- https://www.chadoteahouse.com
- https://www.denstea.com
- https://www.sazentea.com/en
- http://www.ujicha-kanbayashi.co.jp
- http://www.marukyu-koyamaen.co.jp/products.html
- http://www.fukumotoen.co.jp/shop/
- http://www.myokoen.com/shop/index.html

* [2018-04-04 Wed] Getting macOS app bundle ID
:PROPERTIES:
:CUSTOM_ID: getting-macos-app-bundle-id
:END:
From [[https://stackoverflow.com/questions/39464668/how-to-get-bundle-id-of-mac-application#39464824][stack overflow]]:

Option 1

#+BEGIN_SRC sh
  osascript -e 'id of app "Emacs"'
#+END_SRC

Option 2

#+BEGIN_SRC sh
  mdls -name kMDItemCFBundleIdentifier -r SomeApp.app
#+END_SRC

* [2018-03-31 Sat] Trying out chunkwm
:PROPERTIES:
:CUSTOM_ID: trying-out-chunkwm
:END:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/trying-out-chunkwm/chunkwm.png]]

*** Installing [[https://github.com/koekeishiya/chunkwm][Chunkwm]]

#+BEGIN_SRC sh
  $ brew tap crisidev/homebrew-chunkwm
  $ brew install --HEAD --with-tmp-logging chunkwm
#+END_SRC

Add a configuration file. Started off from this [[https://gist.github.com/shihanng/65b73712df2e51d4d78cc27c218bac35#file-chunkwmrc][example]].

#+BEGIN_QUOTE
~/.chunkwmrc
chmod +x ~/.chunkwmrc
#+END_QUOTE

*Note*: Ensure core::plugin_dir matches homebrew's plugin directory. Typically something like: //path/to/homebrew/opt/chunkwm/share/chunkwm/plugins/

Start chunkwmrc service.

#+BEGIN_SRC sh
  $ brew services start crisidev/chunkwm/chunkwm
#+END_SRC

*** Installing [[https://github.com/koekeishiya/skhd][skhd]] (a hotkey daemon)

#+BEGIN_SRC sh
  $ brew install --HEAD --with-logging  koekeishiya/formulae/skhd
#+END_SRC

Start skhd service.

#+BEGIN_SRC sh
  $ brew services start koekeishiya/formulae/skhd
#+END_SRC

Skhd logs location.

#+BEGIN_SRC sh
  /Users/you/homebrew/var/log/skhd/skhd.[out|err].log
#+END_SRC

Add a configuration file. Started off from this [[https://raw.githubusercontent.com/koekeishiya/chunkwm/master/src/plugins/tiling/examples/khdrc][example]].

#+BEGIN_SRC sh
  ~/.skhdrc
  chmod +x ~/.skhdrc
#+END_SRC

*** Installing [[https://github.com/koekeishiya/skhd][khd]] (easily invoke hotkeys from terminal)
#+BEGIN_SRC sh
  $ brew install khd
#+END_SRC

Some additional Mission Control and keyboard shortcut preferences:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/trying-out-chunkwm/mission_control.png]]

#+ATTR_HTML: :width 75% :height 75%
[[file:images/trying-out-chunkwm/keyboard_shortcuts.png]]
* [2018-02-06 Tue] Building bazel on macOS
:PROPERTIES:
:CUSTOM_ID: building-bazel-on-macos
:END:
** Bootstrap
#+BEGIN_SRC sh
  brew tap bazelbuild/tap
  brew install bazelbuild/tap/bazel
#+END_SRC

** Build
#+BEGIN_SRC sh
  git clone https://github.com/bazelbuild/bazel.git
  cd bazel
  bazel build //src:bazel
#+END_SRC

** Get your bazel binary
#+BEGIN_SRC
  Self-contained binary in bazel-bin/src/bazel
#+END_SRC

** Known revisions
- https://github.com/bazelbuild/bazel.git @ d81a46cebe07f73d3ea38206262cf7a1a9513b42
- https://github.com/bazelbuild/rules_apple.git @ e921a9f727e039c8b5087d4f98c5d09f189658cd
* [2018-01-07 Sun] Extracting files from pkg
:PROPERTIES:
:CUSTOM_ID: extracting-files-from-pkg
:END:
#+BEGIN_SRC sh
  mkdir tmp
  cd tmp
  xar -xf ../Some.pkg
  cat Payload | gunzip -dc |cpio -i
#+END_SRC
* [2018-01-07 Sun] Installing Inkscape with homebrew
:PROPERTIES:
:CUSTOM_ID: installing-inkscape-with-homebrew
:END:
#+BEGIN_SRC sh
  brew tap caskroom/cask
  brew install caskformula/caskformula/inkscape
#+END_SRC
* [2017-12-16 Sat] Magit amend commit author
:PROPERTIES:
:CUSTOM_ID: magit-amend-commit-author
:END:
Rarely use it, but handy. Use Magit to amend git commit author.

- Rebase interactively (r, i).
- Move point to commit to ammend.
- Execute command (x).
#+BEGIN_SRC sh
  git commit --amend --author="name <email>"
#+END_SRC
- Commit (c, c).

#+ATTR_HTML: :width 75% :height 75%
[[file:images/amend-git-commit-author-on-magit/amending.gif]]
* [2017-12-13 Wed] Homebrew install from cache
:PROPERTIES:
:CUSTOM_ID: homebrew-install-from-cache
:END:
Came across a 404 while installing graphviz-2.40.1.tar.gz via homebrew. If you can find the package elsewhere, copy over to homebrew's cache directory.

#+BEGIN_SRC sh
  brew --cache
#+END_SRC

#+RESULTS:
/Users/User/Library/Caches/Homebrew

* [2017-11-16 Thu] org-babel Objective-C support
:PROPERTIES:
:CUSTOM_ID: org-babel-objective-c-support
:END:
Wanted to quickly execute an Objective-C snippet. org-babel didn't support it out of the box, but adding it was straightforward (looked at ob-C.el and ob-java.el):

#+BEGIN_SRC emacs-lisp
  (require 'ob)

  (defcustom org-babel-objc-compile-command "clang -x objective-c -framework Foundation"
    "For example: \"clang -x objective-c -framework Foundation\"."
    :group 'org-babel
    :version "24.3"
    :type 'string)

  (defun org-babel-execute:objc (body params)
    "Compile Objective-C BODY with org PARAMS and execute binary."
    (let* ((src-file (org-babel-temp-file "org-babel-objc-block-" ".m"))
           (cmpflag (or (cdr (assq :cmpflag params)) ""))
           (full-body (org-babel-expand-body:generic body params))
           (bin-file
            (org-babel-process-file-name
             (org-babel-temp-file "org-babel-objc-block" org-babel-exeext))))
      (with-temp-file src-file (insert full-body))
      (org-babel-eval
       (concat org-babel-objc-compile-command " " cmpflag " " src-file " " "-o" " " bin-file) "")

      ;; Using 2>&1 since org babel does not include stderr in output from NSLog.
      (let ((results (org-babel-eval (concat (org-babel-process-file-name bin-file) " 2>&1")  "")))
        (org-babel-reassemble-table
         (org-babel-result-cond (cdr (assq :result-params params))
           (org-babel-read results)
           (let ((tmp-file (org-babel-temp-file "c-")))
             (with-temp-file tmp-file (insert results))
             (org-babel-import-elisp-from-file tmp-file)))
         (org-babel-pick-name
          (cdr (assq :colname-names params)) (cdr (assq :colnames params)))
         (org-babel-pick-name
          (cdr (assq :rowname-names params)) (cdr (assq :rownames params)))))))

  (provide 'ob-objc)
#+END_SRC

Add /objc/ to /org-babel-load-languages/, and you can subsequently compile and run Objective-C blocks like:

#+BEGIN_SRC objc :results verbatim
  #import <Foundation/Foundation.h>

  int main() {
    NSLog(@"Hello World");
    return 0;
  }
#+END_SRC

#+RESULTS:
: 2017-11-16 01:47:28.923 org-babel-objc-block-Aai8ux[15319:346480] Hello World

* [2017-11-12 Sun] iOS dev command-line goodies
:PROPERTIES:
:CUSTOM_ID: ios-dev-command-line-goodies
:END:
** Install ipa on device
Get utility with:
#+BEGIN_SRC sh
  npm install -g ipa-deploy
  npm install -g ios-deploy
#+END_SRC
Install ipa on connected iPhone:
#+BEGIN_SRC sh
  ipa-deploy path/to/your/App.ipa
#+END_SRC
** Install app on booted simulator
Install ipa on connected iPhone:
#+BEGIN_SRC sh
  xcrun simctl install booted path/to/your/App.app
#+END_SRC
** Install ipa on booted simulator
#+BEGIN_SRC sh
  #!/bin/bash

  # Unzip ipa, install app, and run on booted simulator.

  set -o nounset
  set -o errexit

  readonly IPA_PATH=$1
  readonly TEMP_DIR_PATH=$(mktemp -d)
  readonly BASENAME=$(basename ${IPA_PATH})
  readonly NAME=${BASENAME%.*}
  readonly APP_DIR_PATH="${TEMP_DIR_PATH}/Payload/${NAME}.app"
  readonly PLIST_FILE_PATH="${APP_DIR_PATH}/Info.plist"

  trap "rm -rf ${TEMP_DIR_PATH}" EXIT

  unzip -o "${IPA_PATH=}" -d "${TEMP_DIR_PATH}"

  readonly BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" ${PLIST_FILE_PATH})

  xcrun simctl install booted "${APP_DIR_PATH}"
  xcrun simctl launch booted "${BUNDLE_ID}"
#+END_SRC
* [2017-11-01 Wed] Eshell pcomplete company completion
:PROPERTIES:
:CUSTOM_ID: eshell-pcomplete-company-completion
:END:
Howard Abrams's [[https://www.youtube.com/watch?v=RhYNu6i_uY4][Introduction to eshell video]] prompted me to poke at eshell some more. This time, I got eshell context aware completion by glueing the excellent [[https://company-mode.github.io][company]] and [[https://masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs][pcomplete]] packages.

#+ATTR_HTML: :width 75% :height 75%
[[file:images/eshell-pcomplete-company-completion/company-pcomplete.png]]

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (require 'company)
  (require 'dash)
  (require 'pcomplete)
  (require 's)

  (defun company-pcomplete--overlap-tail (a b)
    "When A is \"SomeDev\" and B is \"Developer\", return \"eloper\"."
    (let ((prefix a)
          (remaining nil))
      (while (and (not remaining) (> (length prefix) 0))
        (when (s-starts-with? prefix b)
          (setq remaining (substring b (length prefix))))
        (setq prefix (substring prefix 1)))
      remaining))

  (defun company-pcomplete--candidates (prefix)
    "Get candidates for PREFIX company completion using `pcomplete'."
    ;; When prefix is: "~/Down" and completion is "Downloads", need
    ;; to find common string and join into "~/Downloads/".
    (-map (lambda (item)
            (if (s-starts-with? prefix item)
                item
              (concat prefix (company-pcomplete--overlap-tail prefix item))))
          (all-completions prefix (pcomplete-completions))))

  (defun company-pcomplete (command &optional arg &rest ignored)
    "Complete using pcomplete. See `company''s COMMAND ARG and IGNORED for details."
    (interactive (list 'interactive))
    (case command
      (interactive (company-begin-backend 'company-pcomplete))
      (prefix (company-grab-symbol))
      (candidates
       (company-pcomplete--candidates arg))))
#+END_SRC

Don't forget to add /company-pcomplete/ to /company-backends,/ and if you want an explicit binding, use something like:

#+BEGIN_SRC emacs-lisp
  (bind-key "<backtab>" #'company-complete eshell-mode-map)
#+END_SRC

* [2017-09-10 Sun] Basic imenu in helpful-mode
:PROPERTIES:
:CUSTOM_ID: basic-imenu-in-helpful-mode
:END:
I'm finding Wilfred Hughes's [[https://github.com/Wilfred/helpful][helpful-mode]], well... rather helpful. However, I'm missing imenu support. Here's a hacky way to get basic imenu.

#+ATTR_HTML: :width 75% :height 75%
[[file:images/basic-imenu-for-helpful-mode/helpful-imenu.png]]

#+BEGIN_SRC emacs-lisp
  (defun helpful--create-imenu-index ()
    "Create an `imenu' index for helpful."
    (beginning-of-buffer)
    (let ((imenu-items '()))
      (while (progn
               (beginning-of-line)
               ;; Not great, but determine if looking at heading:
               ;; 1. if it has bold face.
               ;; 2. if it is capitalized.
               (when (and (eq 'bold (face-at-point))
                          (string-match-p
                           "[A-Z]"
                           (buffer-substring (line-beginning-position)
                                             (line-end-position))))
                 (add-to-list 'imenu-items
                              (cons (buffer-substring (line-beginning-position)
                                                      (line-end-position))
                                    (line-beginning-position))))
               (= 0 (forward-line 1))))
      imenu-items))

  (defun helpful-mode-hook-function ()
    "A hook function for `helpful-mode'."
    (setq imenu-create-index-function #'helpful--create-imenu-index))

  (add-hook 'helpful-mode-hook
            #'helpful-mode-hook-function)
#+END_SRC
* [2017-08-19 Sat] Projectile shell dir company completion
:PROPERTIES:
:CUSTOM_ID: projectile-shell-dir-company-completion
:END:
[[https://github.com/bbatsov/projectile][Projectile]] and [[https://company-mode.github.io][company]] are just amazing Emacs packages. Projectile gives random access to files, while company completes well... anything. For shells, Emacs has a handful of options.

Standing on the shoulders of package giants ([[https://github.com/magnars/dash.el][dash]] and [[https://github.com/rejeep/f.el][f]] included) and some elisp, we can bring random access to project directories from the shell.

#+ATTR_HTML: :width 75% :height 75%
[[file:images/projectile-shell-dir-company-completion/company-projectile-cd.png]]

#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
  (require 'company)
  (require 'dash)
  (require 'f)
  (require 'projectile)

  (defvar-local company-projectile-cd-prefix "cd ")

  (defun company-projectile-cd (command &optional arg &rest ignored)
    "Company shell completion for any projectile path."
    (interactive (list 'interactive))
    (case command
      (interactive (company-begin-backend 'company-projectile-cd))
      (prefix
       (company-grab-symbol-cons company-projectile-cd-prefix
                                 (length company-projectile-cd-prefix)))
      (candidates
       (company-projectile-cd--candidates
        (company-grab-symbol-cons company-projectile-cd-prefix
                                  (length company-projectile-cd-prefix))))
      (post-completion
       (company-projectile-cd--expand-inserted-path arg))))

  (defun company-projectile-cd--candidates (input)
    "Return candidates for given INPUT."
    (company-projectile-cd--reset-root)
    (when (consp input)
      (let ((search-term (substring-no-properties
                          (car input) 0 (length (car input))))
            (prefix-found (cdr input)))
        (when prefix-found
          (if (projectile-project-p)
              (company-projectile-cd--projectile search-term)
            (company-projectile-cd--find-fallback search-term))))))

  (defun company-projectile-cd--projectile (search-term)
    (-filter (lambda (path)
               (string-match-p (regexp-quote
                                search-term)
                               path))
             (-snoc
              (projectile-current-project-dirs)
              ;; Throw project root in there also.
              (projectile-project-root))))

  (defun company-projectile-cd--find-fallback (search-term)
    (ignore-errors
      (-map (lambda (path)
              (string-remove-prefix "./" path))
            (apply #'process-lines
                   (list "find" "." "-type" "d"  "-maxdepth" "2" "-iname"
                         (format "\*%s\*" search-term))))))

  (defun company-projectile-cd--expand-inserted-path (path)
    "Replace relative PATH insertion with its absolute equivalent if needed."
    (unless (f-exists-p path)
      (delete-region (point) (- (point) (length path)))
      (insert (concat (projectile-project-root) path))))

  (defun company-projectile-cd--reset-root ()
    "Reset project root. Useful when cd'ing in and out of projects."
    (projectile-reset-cached-project-root)
    (when (projectile-project-p)
      (projectile-project-root)))
#+END_SRC

* [2017-08-09 Wed] Creating icns icons
:PROPERTIES:
:CUSTOM_ID: creating-icns-icons
:END:
Stack overflow yields [[https://stackoverflow.com/questions/12437433/where-can-i-find-icon-composer-on-mac][Where can i find Icon Composer on Mac?]] when I did a quick search to convert a png to icns. For future reference:
#+BEGIN_SRC sh
  #!/bin/bash -e

  set -e
  set -o pipefail

  if [ "$#" -ne 1 ]; then
   echo "\nusage: to_icns.sh path/to/image.png\n"
   exit 1
  fi

  readonly IMAGE_FPATH=$1
  readonly BASENAME=$(basename ${IMAGE_FPATH%.*})

  mkdir ${BASENAME}.iconset

  sips -z 16 16   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_16x16.png"
  sips -z 32 32   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_16x16@2x.png"
  sips -z 32 32   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_32x32.png"
  sips -z 64 64   $IMAGE_FPATH --out "${BASENAME}.iconset/icon_32x32@2x.png"
  sips -z 128 128 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_128x128.png"
  sips -z 256 256 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_128x128@2x.png"
  sips -z 256 256 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_256x256.png"
  sips -z 512 512 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_256x256@2x.png"
  sips -z 512 512 $IMAGE_FPATH --out "${BASENAME}.iconset/icon_512x512.png"

  cp $IMAGE_FPATH "${BASENAME}.iconset/icon_512x512@2x.png"

  iconutil -c icns ${BASENAME}.iconset

  rm -R ${BASENAME}.iconset

  echo Wrote ${BASENAME}.icns
#+END_SRC
* [2017-08-06 Sun] Forcing aptX on MacOS bluetooth audio
:PROPERTIES:
:CUSTOM_ID: forcing-aptx-on-macos-bluetooth-audio
:END:
Bought a pair of QuietComfort 35. Audio quality on MacOS was lagging compared to iOS. Googling led to different posts suggesting the use of Bluetooth Explorer to force aptX usage. Did the trick for me.

*Bluetooth Explorer* can be downloaded from https://developer.apple.com/download/more. Search for Hardware IO tools:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/forcing-aptx-on-macos-bluetooth-audio/download-bluetooth-explorer.png]]

Open *Hardware_IO_Tools_for_Xcode_7.3.dmg* and launch *Bluetooth Explorer*:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/forcing-aptx-on-macos-bluetooth-audio/tools-image.png]]

Select *Audio Options*:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/forcing-aptx-on-macos-bluetooth-audio/audio-options.png]]

Check *Force use of aptX*:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/forcing-aptx-on-macos-bluetooth-audio/force-aptx.png]]

Don't forget to disconnect and reconnect your Bluetooth device.

* [2017-07-10 Mon] Hungary travel bookmarks
:PROPERTIES:
:CUSTOM_ID: hungary-travel-bookmarks
:END:
- [[https://www.lonelyplanet.com/hungary/budapest/travel-tips-and-articles/my-city-budapest/40625c8c-8a11-5710-a052-1479d276913c?][My city: Budapest - Lonely Planet]].
* [2017-07-08 Sat] Faster cursor movement on macOS
:PROPERTIES:
:CUSTOM_ID: faster-cursor-movement-on-macos
:END:
Faster cursor movement on macOS by increasing your keyboard's initial key repeat subsequent key repeat.
#+BEGIN_SRC sh
  defaults write -g KeyRepeat -int 1
  defaults write -g InitialKeyRepeat -int 10
#+END_SRC
* [2017-07-07 Fri] Search/insert one-liners with Emacs helm-ag
:PROPERTIES:
:CUSTOM_ID: search-insert-one-liners-with-emacs-helm-ag
:END:
Emacs [[https://github.com/emacs-helm/helm][helm]] is awesome. [[https://github.com/syohex/emacs-helm-ag][helm-ag]] is double awesome. Searching for one-liners in your codebase, narrowing down with helm, and easily inserting is triple awesome.

#+ATTR_HTML: :width 75% :height 75%
[[file:images/search-and-insert-one-liners-with-helm-ag/helm-ag-insert.gif]]

#+BEGIN_SRC emacs-lisp
  (defun ar/helm-ag (arg)
    "Helm-ag search remembering last location.  With ARG, forget the last location."
    (interactive "P")
    (defvar ar/helm-ag--default-locaction nil)
    (setq ar/helm-ag--default-locaction
                   (read-directory-name "search in: " (if arg
                                                          default-directory
                                                        ar/helm-ag--default-locaction) nil t))
    (helm-do-ag ar/helm-ag--default-locaction))

  (defun ar/helm-ag-insert (arg)
    ;; Helm-ag and insert match.
    (interactive "P")
    (let* ((actions (helm-make-actions
                     "Insert"
                     (lambda (candidate)
                       ;; Drop file:line:column. For example:
                       ;; arc_hostlink.c:13:2:#include <linux/fs.h>
                       ;; => #include <linux/fs.h>
                       (insert (replace-regexp-in-string "^[^ ]*:" "" candidate)))))
           (helm-source-do-ag (helm-build-async-source "The Silver Searcher"
                                :init 'helm-ag--do-ag-set-command
                                :candidates-process 'helm-ag--do-ag-candidate-process
                                :persistent-action  'helm-ag--persistent-action
                                :action actions
                                :nohighlight t
                                :requires-pattern 3
                                :candidate-number-limit 9999
                                :keymap helm-do-ag-map
                                :follow (and helm-follow-mode-persistent 1))))
      (call-interactively #'ar/helm-ag)))
#+END_SRC
* [2017-05-29 Mon] Sleep bookmarks
:PROPERTIES:
:CUSTOM_ID: sleep-bookmarks
:END:
:MODIFIED:
[2019-03-12 Tue]
:END:
- [[https://news.ycombinator.com/item?id=15997016][Algorithmic Solution to My Insomnia (Hacker News)]].
- [[https://www.gwern.net/Melatonin][Melatonin - Gwern.net]].
- [[https://slatestarcodex.com/2018/07/10/melatonin-much-more-than-you-wanted-to-know][Melatonin: Much More Than You Wanted To Know | Slate Star Codex]].
* [2017-05-28 Sun] Tea bookmarks
:PROPERTIES:
:CUSTOM_ID: tea-bookmarks
:END:
:MODIFIED:
[2018-12-09 Sun]
:END:
- [[http://www.notesontea.com][Georgia's notes on tea]].
- [[https://www.drweil.com/videos-features/videos/9-green-teas-to-try/][Nine Green Teas To Try | Video (Andrew Weil, M.D.)]].
* [2017-04-23 Sun] Math bookmarks
:PROPERTIES:
:CUSTOM_ID: math-bookmarks
:END:
:MODIFIED:
[2021-11-09 Tue]
:END:
- [[https://www.3blue1brown.com/#lessons][3Blue1Brown]].
- [[https://news.ycombinator.com/item?id=14161876][Calculus Made Easy (1914) (Hacker News)]].
- [[https://math.stackexchange.com/questions/733754/visually-stunning-math-concepts-which-are-easy-to-explain][Visually stunning math concepts which are easy to explain]].
* [2017-04-23 Sun] GnuPG and macOS
:PROPERTIES:
:CUSTOM_ID: gnupg-and-macos
:END:
Had problems installing and using GnuPG on macOS, primarily for Emacs use:

#+BEGIN_EXAMPLE
gpg: problem with the agent: Inappropriate ioctl for device
gpg: error creating passphrase: Operation cancelled
gpg: symmetric encryption of '[stdin]' failed: Operation cancelled
#+END_EXAMPLE

Basic installation required:

#+BEGIN_SRC sh
  brew install gnupg
#+END_SRC

But worked around the error above by using pinentry-mac (UI), instead of Emacs prompts.

#+BEGIN_SRC sh
  brew install pinentry-mac
#+END_SRC

Edited ~/.gnupg/gpg-agent.conf with:

#+BEGIN_EXAMPLE
pinentry-program path/to/homebrew/bin/pinentry-mac
#+END_EXAMPLE

May need to kill gpg-agent to reload config.

#+BEGIN_SRC sh
  gpgconf --kill gpg-agent
#+END_SRC

* [2017-03-13 Mon] Installing gnuplot on macOS
:PROPERTIES:
:CUSTOM_ID: installing-gnuplot-on-macos
:END:
UPDATE(2019-05-19 Sun): Plan A and B use options no longer available since the recent changes to [[https://github.com/Homebrew/homebrew-core/issues/31510][remove all options from Homebrew/homebrew-core formulae]]. See Plan C.

** +Plan A+
*** +Install gnuplot Qt+
+If you have the resources, you can try the Qt flavor. You need at least 15GB to download and a long build. Ran out of space on my Macbook Air. Aborted.+
#+BEGIN_SRC sh
  brew install gnuplot --with-qt
#+END_SRC
** +Plan B+
*** +Install xquartz+
#+BEGIN_SRC sh
  brew install Caskroom/cask/xquartz
#+END_SRC
*** +Install gnuplot x11+
#+BEGIN_SRC sh
  brew install gnuplot --with-x11
#+END_SRC

** Install feedgnuplot
Feedgnuplot is handy for plotting data streams realtime.
#+BEGIN_SRC sh
  brew install feedgnuplot
#+END_SRC

**  Plan C
*** Install with no options
 #+BEGIN_SRC sh
  brew install gnuplot
 #+END_SRC

So far so good, but default gnuplot formula uses Qt and the Cocoa plugin could not be loaded:

 #+begin_quote
  qt.qpa.plugin: Could not find the Qt platform plugin "cocoa" in ""
 #+end_quote

*** Debugging
**** QT_DEBUG_PLUGINS

Turns out you can get plugin logs using the QT_DEBUG_PLUGINS environment variable:

#+begin_src sh
  export QT_DEBUG_PLUGINS=1
#+end_src

#+begin_quote
  QFactoryLoader::QFactoryLoader() checking directory path "/Users/myuser/homebrew/Cellar/gnuplot/5.2.6_1/libexec/gnuplot/5.2/platforms" ...
#+end_quote

This led me to find out about the /gnuplot/5.2/gnuplot_qt/ binary.

**** qt_prfxpath

Getting the Qt prefix can be done by inspecting QtCore's strings:

#+begin_src sh :results output :exports both
  strings /Users/myuser/homebrew/Cellar/qt/5.12.3/Frameworks/QtCore.framework/QtCore | grep qt_prfxpath
#+end_src

#+RESULTS:
: qt_prfxpath=/usr/local/Cellar/qt/5.12.3

Ok so qt_prfxpath is pointing to //usr/local/Cellar/qt/, while my installation's is at //Users/myuser/homebrew/Cellar/qt/. This is problematic and indeed my fault for installing homebrew in //Users/myuser/homebrew/ instead of the recommended //usr/local/.

Symlinking did the job:

#+begin_src sh
  sudo mkdir -p /usr/local/Cellar
  sudo ln -s ~/homebrew/Cellar/qt /usr/local/Cellar/qt
#+end_src

#+begin_src sh
  /Users/myuser/homebrew/Cellar/gnuplot/5.2.6_1/libexec/gnuplot/5.2/gnuplot_qt
#+end_src

#+RESULTS:
: QFactoryLoader::QFactoryLoader() checking directory path "/Users/myuser/homebrew/Cellar/qt/5.12.3/plugins/platforms" ...
: QFactoryLoader::QFactoryLoader() looking at "/Users/myuser/homebrew/Cellar/qt/5.12.3/plugins/platforms/libqcocoa.dylib"
: Found metadata in lib /Users/myuser/homebrew/Cellar/qt/5.12.3/plugins/platforms/libqcocoa.dylib

Success.

* [2017-01-22 Sun] Tel Aviv travel bookmarks
:PROPERTIES:
:CUSTOM_ID: tel-aviv-travel-bookmarks
:END:
:MODIFIED:
[2019-01-27 Sun]
:END:
- Breakfast club (dancing).
- Claro/Sarona Market.
- [[https://en.wikipedia.org/wiki/Dizengoff_Square][Dizengoff Square - Wikipedia]].
- Drink Cafe hafuch at Rothschild 12.
- Jaffa's Flea market.
- Nightlife: Kuli Alma's hipster haven. Imperial craft cocktail bar (drink Gold fashioned).
- Park HaYarkon.
- Tel Aviv museum of art.
* [2017-01-22 Sun] Jerusalem travel bookmarks
:PROPERTIES:
:CUSTOM_ID: jerusalem-travel-bookmarks
:END:
- Jerusalem: Rooftop Mamilla restarurant.
* [2017-01-22 Sun] Nepal travel bookmarks
:PROPERTIES:
:CUSTOM_ID: nepal-travel-bookmarks
:END:
:MODIFIED:
[2022-10-01 Sat]
:END:
- [[https://www.planetware.com/pictures/nepal-nep.htm][Nepal in Pictures: 19 Beautiful Places to Photograph]].
- [[https://en.wikipedia.org/wiki/Patan_Durbar_Square][Patan Durbar square]].
- [[https://vargiskhan.com/log/truth-behind-mysterious-magnetic-hill-of-ladakh/][The Truth Behind the Mysterious Magnetic Hill of Ladakh - Vargis Khan]].
* [2016-12-02 Fri] Singapore notes
:PROPERTIES:
:CUSTOM_ID: singapore-notes
:END:
- Hotel Mono, 18 Mosque street #01-04.
- Buddha tooth relic museum.
- [[http://www.telegraph.co.uk/travel/picturegalleries/8308524/Singapores-best-hawker-centres.html][Best Hawker centers]].
- Kong Meng San Phor Kark See Monastery.
- [[http://gothere.sg][Go there (figure out fastest MRT route)]].
- [[http://2bearbear.com/what-to-eat-at-abc-market-hawker-centre-abc-brickworks-food-centre/][What to eat at ABC Market (Hawker Centre) aka ABC Brickworks Food Centre?]].
- Curry puffs (see [[http://www.hungrygowhere.com/gallery/taste-test-crisp-curry-puffs-*gid-39443101/][Taste test: Crisp curry puffs]]).
- [[http://thepeakmagazine.com.sg/2016/07/its-official-here-are-singapores-17-michelin-rated-hawker-stalls-in-2016/][Singapore’s 17 Michelin-rated Hawker Stalls in 2016]].
- Temples
  - [[http://burmesebuddhisttemple.org.sg/index.htm][Sasanaramsi Burmese temple (14, Tai Gin Road, Singapore 327873)]].
  - [[https://en.wikipedia.org/wiki/Thian_Hock_Keng][Thian Hock Keng temple]].
  - [[http://sultanmosque.sg][Sultan Mosque]].
- Hawkers
  - Mr and Mrs Mohgan's Super Crispy Roti Prata ([[http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/16560200][source]]) on Crane Road. Dhal/fish/mutton curry side.
  - Roast Paradise (maybe)
    Address: #01-122 Old Airport Road Food Centre.
    Hours: Tues-Sun: 11am to 4pm or till sold out, Wed and Sun: 11am to 2pm, Closed on Mondays.
  - Fatty Cheong, 肥仔详, (#01-120, ABC Brickworks Food Centre, 6 Jalan Bukit Merah Singapore 150006): char siew and xio bak rice and char siew noodles.
  - Hoo Kee Bak Chang (Amoy Street Food Centre): bak zhang (glutinous rice dumpling). Try  Choose from three kinds: chestnut ($2.80); chestnut with salted egg yolk ($3.60); and chestnut with mushroom ($3.60).
  - Lim Kee (Orchard) Banana Fritters (Maxwell food centre, [[http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/0e560200][source]]).
  - Mr Avocado Exotic Juice (Alexandra village food centre, [[http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/19560200][source]]).
  - Tanglin Crispy Curry Puff (Hong Lim Food Centre or Maxwell, [[http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/65560200][source]]) (东陵酥皮咖喱角). Try sardine curry puff?
  - Chuan Kee Satay ([[http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/63560200][source]]). Long queue for pork satay.
  - Selera Rasa Nasi Lemak ([[http://www.hungrygowhere.com/gallery/hgw-s-best-hawker-food-for-2015-*gid-75813101/6b560200][source]]).
  - Fu Shun Jin Ji Shao La Mian Jia (Maxwell food centre, [[http://www.hungrygowhere.com/dining-guide/hawker/food-guide-maxwell-food-centre-*aid-10733101/][source]]): Char siu + noodles.
  - Shanghai La Mian Xiao Long Bao (Alexandra Village food centre, [[http://www.hungrygowhere.com/gallery/food-guide-alexandra-village-food-centre-*gid-087b3101/584c0200][source]]): xiao long bao or soup dumplings ($4.50 for 7 pieces).
- Timbre+ (hipster hawker centre? [[http://www.straitstimes.com/lifestyle/food/10-dishes-to-try-at-hipster-hawker-centre-timbre][source]]).
- Supertree Grove (go at dusk, see lights turn on).
- Singapore Botanic garden.
  - Ginger Garden.
  - Palms valley.
  - Orchid garden.
- Sri Mariamman Temple.
- Kusu Island?
- Chilly crab (“Jumbo” Chilli Crab Restaurant in Clarke Quay or Harvest Seafood Restaurant)?
- Afternoon tea?
  - www.tea-chapter.com.sg
- Bumboats (£2.50 return) leave Changi Point between 6am and 9.30pm for the 10-minute crossing to Palau Ubin. Hire a bicycle in the village where the boats dock.
- Haji Lane (colorful road).
- Tiong Bahru 1930s public housing estate (**)
  - Chong Yu Wanton Mee (Tiong Bahru Market And Food Centre #02-30, 30 Seng Poh Road, [[http://www.timeout.com/singapore/restaurants-and-cafes/chong-yu-wanton-mee#tab_panel_2][source]]).
  - old-fashioned treats at Tiong Bahru Galicier (55 Tiong Bahru Rd).
- Chinatown
  - Pek Sin Choon Tea: Oldest team merchants.
  - Ang Mo Kio: Sri Mariamman Hindu temple.
  - Strangelets: quirky stuff from around the world.
  - 40 Hands: Allegedly one of most popular coffee joints.
  - BooksActually: Coolest book shop.
- Keong Saik (next to Chinatown)
  - 1939 Hotel.
  - The Library (49 Keong Saik Rd): night drinks, ask for key/password next door (the-study.sg) (**)
  - [[http://marikos.com.sg][Mariko's (Now Phat Cat laundry): Maybe food or drink at night?]] (**)
  - Rose Citron (23 Keong Said Rd): French and Asian articles.
- Everton park (old housing estate), new meets old
  - Coffee
    - Nylon coffee roasters (http://nyloncoffee.sg).
    - Just Want Coffee (justwant.com.sg).
    - Cozy corner coffee.
  - Sweets
    - Grin Affair (grinaffair.com): natural ingredients into glass jar creations.
    - Batterworks (batter-works.com): pastries.
    - http://cozycornercoffee.com.
    - Seriously ice scream (facebook.com/seriouslyicecream).
    - Ji Xiang Confectionery (jixiangconfectionery.com): Traditional glutinous sweets. (**)
  - Food
    - The Provision Shop (Blk 3 Everton Park): for a classic and affordable meal.
    - Chew the Fat (Blk 6 Everton Park): comfort food.
    - Eden's Kitchen (http://edenskitchen.sg): healthy, green tea, coconut oil, etc.
- Jalan Besar
  - Char: unconventional char siu ([[http://www.nytimes.com/2015/01/25/travel/restaurant-report-char-in-singapore.html][source]]).
  - The Banana Leaf Apollo (Little India).
  - Beach Road Scissors-Cut (220 Jln Besar): Curry Rice. (**)
  - Fu Zhou Poh Hwa Oyster Cake (166 Jln Besar): UFO-shaped snacks. (**)
  - [[http://www.sweechoon.com][Swee Choon Tim Sum Restaurant: a dim sum institution!]]. (**)
  - [[http://papapalheta.com][Papa Palheta coffee: best coffee in town?]].
  - [[http://thegeneralco.sg][General Company: awesome design and workshops]]. (**)
  - [[http://eat.thebravery.sg][The Bravery: brunch, aka awesome pancakes]]. (**)
  - [[http://aeiou.sg][AEIOU: Retro shopping]].
- Geylang (preserved shophouses and rich in Malay history)
  - Hajjah Mona Nasi Padang (Geylang Serai food centre): Order nasi padang (try dry one).
  - Biryani Express (Geylang Serai food centre)
  - Red light district. Still?
  - [[http://brawnandbrains.sg/][Brawn & Brains (Coffee)]].
  - [[http://oldgeylang.com.sg][Old Geylang (crocodile, turtle soup, other oddities)]].
  - Hi-Thrift (1 Geylang Rd): Second hand treasures? (**).
* [2016-12-02 Fri] Email provider bookmarks
:PROPERTIES:
:CUSTOM_ID: email-provider-bookmarks
:END:
:MODIFIED:
[2018-05-29 Tue]
:END:
- [[https://www.robinwhittleton.com/2018/02/18/dropping-g-suite/][Dropping G Suite - Robin Whittleton]].
- [[https://heluna.com/][Heluna - Cloud-based antispam]].
- [[https://mailinabox.email/][Mail-in-a-Box]].
- [[https://mailbox.org/][mailbox.org – Ihr sicherer E-Mail-Anbieter]].
- [[https://mailbox.org/][Mailbox.org]].
- [[http://migadu.com][Migadu]].
- [[http://Posteo.de][Posteo]].
- [[https://protonmail.com/][ProtonMail]].
- [[https://soverin.net/][Soverin - Home - Soverin]].
* [2016-12-01 Thu] Go snippets
:PROPERTIES:
:CUSTOM_ID: go-snippets
:END:
** Command-line flags
#+BEGIN_SRC go
  import (
        "flag"
  )

  type args struct {
        flag1  string
        flag2  string
          arg    string
  }

  func parseArgs() args {
        args := args{}

        flag.StringVar(&args.flag1, "flag1\n", "\n", "some flag 1 with sample `value`")
        flag.StringVar(&args.flag2, "flag2\n", "\n", "some flag 2 with sample `value`")

        flag.CommandLine.Usage = func() {
            fmt.Fprintf(os.Stderr, "Usage of %s:\n\n", os.Args[0])
            fmt.Fprintf(os.Stderr, "\n  myarg\n\n")
            flag.PrintDefaults()
        }

        flag.Parse()

        args.arg = flag.Arg(0)

        if args.flag1 == "" || args.flag2 == "" || args.arg == "" {
            flag.CommandLine.Usage()
            os.Exit(1)
        }
        return args
  }

  func main() {
          args := parseArgs()
          fmt.Printf("Args: %#v\n", args)
  }

#+END_SRC

#+BEGIN_SRC sh
  go run main.go -flag1 val1 -flag2 val2 arg
#+END_SRC

* [2016-12-01 Thu] Javascript snippets
:PROPERTIES:
:CUSTOM_ID: javascript-snippets
:END:
* [2016-11-27 Sun] Sydney travel bookmarks
:PROPERTIES:
:CUSTOM_ID: sydney-travel-bookmarks
:END:
- [[https://www.buzzfeed.com/mikeynicholson/thats-not-a-pool-this-is-a-pool][17 Stunning Sydney Pools That Will Make You Want To Jump Back In The Water]].
- [[http://apassionandapassport.com/2015/01/48-hours-sydney-australia/][48 Hours in Sydney]].
- [[http://bourkestreetbakery.com.au/][Bourke Street Bakery]].
- Collector Store (Surrey Hills).
- [[http://merivale.com.au/coogeepavilion][Coogee Pavilion]].
- [[http://fouratefive.com/][Four ate five]].
- [[http://www.harryscafedewheels.com.au/][Harry's Cafe de Wheels: Famous for Pies and Peas, Meat Pies, Hot Dogs]].
- [[https://www.hurricanesgrillandbar.com.au/bondi-beach/][Hurricane’s grill & bar Bondi beach]].
- [[http://loxstockandbarrel.com.au/][Lox Stock & Barrel]].
- [[http://marigold.com.au][Marigold citymark (dim sum)]].
- [[http://www.reubenhills.com.au/about][Reuben Hills]].
- [[https://seanspanaroma.co/][Seans]].
- [[http://thetrustedtraveller.com/sydneys-best-markets/][Sydney's Best Markets - The Trusted Traveller]].
- [[http://theeightrestaurant.com.au][The eight (dim sum)]].
- [[http://theglenmore.com.au/][The Glenmore]].
- [[http://www.threeblueducks.com/][Three Blue Ducks]].
* [2016-10-16 Sun] Laos travel bookmark
:PROPERTIES:
:CUSTOM_ID: laos-travel-bookmark
:END:
- [[https://www.youtube.com/watch?v=uImN-P4xh1U][Best Way to Enjoy Luang Prabang]].

* [2016-10-08 Sat] Singapore travel bookmarks
:PROPERTIES:
:CUSTOM_ID: singapore-travel-bookmarks
:END:
:MODIFIED:
[2021-11-23 Tue]
:END:
- [[https://www.reddit.com/r/singapore/comments/4s5y70/any_place_to_go_thrift_shopping_in_singapore/][Any place to go thrift shopping in Singapore? (Reddit)]].
- East coast lagoon.
- [[https://twitter.com/visakanv/status/1129373195901915136][Food post on SG]].
- [[http://ieatishootipost.sg/tai-hua-bak-chor-mee-everybody-queue-up][Hillstreet Tai Hwa Pork Noodles: Everybody Queue up!]].
- [[https://en.wikipedia.org/wiki/Little_India,_Singapore][Little India]].
- [[https://twitter.com/visakanv/status/1171034065354379264][More SG spots]].
- [[http://thehoneycombers.com/singapore/second-hand-shopping-in-singapoe-best-places-for-thrift-shopping-for-pre-loved-clothes-used-furniture-and-vintage-accessories/][Second hand shopping in Singapore]].
- [[https://twitter.com/visakanv/status/1171037799673262083][SG spots]].
- [[http://www.telegraph.co.uk/travel/picturegalleries/8308524/Singapores-best-hawker-centres.html][Singapore's best hawker centres - Telegraph]].
- [[http://sg.asia-city.com/][The Insider's Guide to Singapore (SG Magazine Online)]].
- [[http://www.mariefranceasia.com/fashion/serial-shopper/shopping-guide/treasure-hunt-5-places-thrift-singapore-107735.html][Treasure Hunt: 5 Places to thrift in Singapore]].
- [[https://twitter.com/visakanv/status/1204136302230130688][Visakan Veerasamy on Twitter: "what do you know about Singapore?"]].
- [[https://www.reddit.com/r/singapore/comments/5gf0y5/what_is_the_best_hawker_center_in_singapore/][What is the best hawker center in singapore? (Reddit)]].
* [2016-10-01 Sat] Cambodia travel bookmarks
:PROPERTIES:
:CUSTOM_ID: cambodia-travel-bookmarks
:END:
- Pub Street (Siem Reap, Cambodia).
* [2016-10-01 Sat] New York travel bookmarks
:PROPERTIES:
:CUSTOM_ID: new-york-travel-bookmarks
:END:
- [[https://www.lonelyplanet.com/usa/new-york-city/travel-tips-and-articles/best-taco-joints-in-new-york-city][Best taco joints in New York City - Lonely Planet]].
- [[https://twitter.com/EricaJoy/status/1079505326922174464][Nice and/or fancy restaurant to eat at in brooklyn (Erica Joy's tweet)]].
* [2016-09-18 Sun] API design bookmarks
:PROPERTIES:
:CUSTOM_ID: api-design-bookmarks
:END:
:MODIFIED:
[2020-09-05 Sat]
:END:
- [[http://blog.madewithlove.be/post/birdseye-view-on-api/][A bird's eye view on API development]].
- [[https://msdn.microsoft.com/en-us/library/dd203052.aspx][A Guide to Designing and Building RESTful Web Services with WCF 3.5 (Microsoft)]].
- [[https://news.ycombinator.com/item?id=24383180][Ask HN: Suggestions for books about API design? | Hacker News]].
- [[http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api][Best Practices for Designing a Pragmatic RESTful API]].
- [[https://apisyouwonthate.com/][Build APIs You Won't Hate]].
- [[https://mollyrocket.com/casey/stream_0028.html][Designing and Evaluating Reusable Components]].
- [[http://harrymoreno.com/2016/03/31/API-design-link-roundup.html][Harry Moreno | API Design Link Roundup]].
- [[https://ozlabs.org/~rusty/index.cgi/tech/2008-03-30.html][How Do I Make This Hard to Misuse?]].
- [[http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/32713.pdf][How to Design a Good API and Why it Matters (Google)]].
- [[https://www.youtube.com/watch?v=aAb7hSCtvGw][How To Design A Good API and Why it Matters - YouTube]].
- [[http://sheredom.wordpress.com/2014/08/10/how-to-design-api-function-that-creates-something/][How to design API function creating objects]]: By Neil Henning.
- [[https://geemus.gitbooks.io/http-api-design/content/en/index.html][HTTP API Design Guide]].
- [[http://jsonapi.org/][JSON API — A specification for building APIs in JSON]].
- [[https://github.com/Microsoft/api-guidelines/blob/master/Guidelines.md][Microsoft REST API Guidelines]].
- [[http://wooptoo.com/blog/notes-on-restful-apis/][Notes on RESTful APIs (Updated)]].
- [[https://bocoup.com/weblog/documenting-your-api][REST API Documentation Best Practices]].
- [[http://www.restapitutorial.com/][REST API Tutorial]].
- [[https://www.youtube.com/watch?v=hdSrT4yjS1g][REST+JSON API Design - Best Practices for Developers - YouTube]].
- [[https://drive.google.com/a/xenodium.com/file/d/0B8qU9uFznmLsUEZ3TEFMbDZQcUE/view][RESTful Service Design - UC Berkeley]].
- [[http://sweng.the-davies.net/Home/rustys-api-design-manifesto][Rusty's API Design Manifesto]].
- [[http://www.aristeia.com/Papers/IEEE_Software_JulAug_2004_revised.htm][Scott Meyers: The Most Important Design Guideline?]].
- [[https://swift.org/documentation/api-design-guidelines/][Swift.org - API Design Guidelines]].
- [[http://www.slideshare.net/landlessness/teach-a-dog-to-rest][Teach a Dog to REST]].
- [[https://bradfults.com/the-best-api-documentation-b9e46400379a#.a7k8edhyc][The Best API Documentation]].
- [[http://www4.in.tum.de/~blanchet/api-design.pdf][The Little Manual of API Design (Jasmin Blanchette, Trolltech)]].
- [[https://drive.google.com/a/xenodium.com/file/d/0B8qU9uFznmLsdFBHS1I2c1ZLRkE/view][Web API Design - Crafting interfaces that developers love]].
- [[http://programmingisterrible.com/post/139222674273/write-code-that-is-easy-to-delete-not-easy-to][Write code that is easy to delete, not easy to extend]].
* [2016-09-18 Sun] Handy pdf utilities
:PROPERTIES:
:CUSTOM_ID: handy-pdf-utilities
:END:
Straight out of [[http://jvns.ca/blog/2016/08/29/how-i-made-a-zine][How (and why) I made a zine]], some handy utilities for generating pdfs...

** Convert pngs to pdfs
#+BEGIN_SRC sh
  # start with a bunch of PNG images of your zine pages
  # convert them all to PDF
  for i in *.png
     do
        # imagemagick is the best thing in the world
        convert $i $i.pdf
     done
#+END_SRC

** Combine pdfs

Combine pdfs using pdftk:

#+begin_src sh
  pdftk *.pdf cat output zine.pdf
#+end_src

Combine pdfs using poppler:

#+begin_src sh
  pdf unite PDF1.pdf PDF2.pdf PDF3.pdf
#+end_src

** Reorder pdf pages
#+BEGIN_SRC sh
  # pdfmod is a GUI that lets you reorder pages
  pdfmod zine.pdf
#+END_SRC

** Add margins to pdf
#+BEGIN_SRC sh
  # pdfcrop lets you add margins to the pdf. this is good because otherwise the
  # printer will cut off stuff at the edges
  pdfcrop --margin '29 29 29 29' zine.pdf zine-intermediate.pdf
#+END_SRC

** Turn pdf into booklet
#+BEGIN_SRC sh
  # pdfjam is this wizard tool that lets you take a normal ordered pdf and turn
  # it into something you can print as a booklet on a regular printer.
  # no more worrying about photocopying machines
  pdfjam --booklet true --landscape --suffix book --letterpaper --signature 12 --booklet true --landscape zine-intermediate.pdf -o zine-booklet.pdf
#+END_SRC
* [2016-09-15 Thu] Fuzzy search Emacs compile history
:PROPERTIES:
:CUSTOM_ID: fuzzy-search-emacs-compile-history
:END:

I wrote about [[#search-bash-history-with-emacs-helm][searching bash history with Emacs Helm]] some time ago. Since then, I've learned about /completing-read/ to generically handle simple Emacs completions (very handy for supporting Helm, Ivy, and Ido completions).

Here's a simple way to combine /completing-read/ and the /compile/ command to enable fuzzy searching your compile history:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/fuzzy-search-emacs-compile-history/fuzzy_compile.gif]]

#+BEGIN_SRC emacs-lisp
  (defun ar/compile-completing ()
    "Compile with completing options."
    (interactive)
    (let ((compile-command (completing-read "Compile command: " compile-history)))
      (compile compile-command)
      (add-to-list 'compile-history compile-command)))
#+END_SRC

* [2016-09-05 Mon] Jumping on the Emacs 25 bandwagon
:PROPERTIES:
:CUSTOM_ID: jumping-on-emacs-25-bandwagon
:END:
Can't miss out on all the new fun. Emacs 25 RC2 is out and lots of people already using it. Since I'm mostly on MacOS these days, installing via homebrew with --devel, gets you RC2:
#+BEGIN_SRC sh
  brew install emacs --devel --with-cocoa --with-gnutls --with-librsvg --with-imagemagick
#+END_SRC

#+ATTR_HTML: :width 75% :height 75%
[[file:images/jumping-on-emacs-25-bandwagon/emacs25.png]]

The only hiccup so far's been org mode failing to export, which was fixed by re-installing it (follow [[https://lists.gnu.org/archive/html/emacs-orgmode/2015-08/msg00320.html][this thread]]).
* [2016-07-31 Sun] San Francisco's Mission District travel bookmarks
:PROPERTIES:
:CUSTOM_ID: san-franciscos-mission-district-travel-bookmarks
:END:
- Atlas Cafe.
- Blue Bottle Coffee.
- Cafe la Boheme.
- [[https://en.wikipedia.org/wiki/Clarion_Alley][Clarion Alley]].
- Coffee Bar.
- Dynamo donut & coffee.
- Four Barrel Coffee.
- Grand Coffee.
- Haus Coffee.
- Kafe 99.
- Linea cafe.
- Mission skateboards.
- pNakamoto's Bitcoin shop.
- Philz Coffee.
- Ritual Coffee roasters.
- Rodger's coffee & tea.
- Sightglass Coffee.
- Stable Cafe.
- Sugar lump coffee lounge.

* [2016-07-25 Mon] Moscow travel bookmarks
:PROPERTIES:
:CUSTOM_ID: moscow-travel-bookmarks
:END:
:MODIFIED:
[2019-10-07 Mon]
:END:
- [[http://www.drzhivago.ru/en/][Drюzhivago (restaurant)]].
- [[http://park-gorkogo.com/][Gorky park]].
- [[https://twitter.com/archpng/status/1180991886674321408][Hotel Peking]].
- [[http://www.kremlin-izmailovo.com/o-kremle/kreml-segodnja][Izmailovo]].
- [[http://mgomz.com/][Kolomenskoe (park)]].
- [[http://www.kreml.ru/en-Us/museums-moscow-kremlin][Kremlin]].
- [[http://kuskovo.ru/en][Kuskovo (park)]].
- [[https://www.mariinsky.ru/en/][Mariinsky (see ballet or opera)]].
- [[https://themoscowtimes.com/][Moskow times (check for events)]].
- [[http://strelka.com/en/bar][Strelka (lectures, cocktails and dances)]].
- [[https://www.tarasbulba.ru/main-menu.html][Tarasbulba (food)]].
- [[http://www.tsaritsyno-museum.ru/index.php?lang=en][Tsaritsyno park]].

* [2016-07-24 Sun] Vietnam travel bookmarks
:PROPERTIES:
:CUSTOM_ID: vietnam-travel-bookmarks
:END:
:MODIFIED:
[2019-11-29 Fri]
:END:
- Can Ba Quan
  - Nikki Tren.
  - Vietnamese Cajun.
- [[https://www.lonelyplanet.com/vietnam/con-son/travel-tips-and-articles/exploring-vietnams-remote-con-dao-islands][Exploring Vietnam's remote Con Dao Islands]].
- [[https://www.vietnamonline.com/destination/hoi-an.html][Hoi An, Vietnam- Travel guide]].
- [[http://www.weloveeattravel.com/list-locations-somebody-feed-phil-saigon-vietnam/][List of Locations: Somebody Feed Phil - Ho Chi Minh City, Vietnam]].
- Pho Bo Phu Gia
  - DC: 146K LY Chinh Thang.
  - 0908 208 866.
- Simon Standly and Vin Dao (food journalists)
- [[http://www.weloveeattravel.com/list-locations-somebody-feed-phil-saigon-vietnam/][Somebody Feed Phil, List of Locations: Ho Chi Minh City]].
- Thuc Pham Duc Viet
  - Bahn Mi
  - Pate Bu Cha
  - Nhan Dat Bi Cha

* [2016-07-19 Tue] Pokémon Go bookmarks
:PROPERTIES:
:CUSTOM_ID: pokemon-go-bookmarks
:END:
:MODIFIED:
[2016-07-24 Sun]
:END:
- [[https://www.reddit.com/r/pokemon/comments/4ruand/pok%25C3%25A9mon_go_lengthy_introduction_guide][Pokémon GO Lengthy Introduction Guide (Reddit)]].
- [[https://rankedboost.com/pokemon-go/catching-locations/][Pokémon locations]].
- [[https://www.reddit.com/r/pokemongo/comments/4rlnmc/some_tips_from_my_last_days_playing][Some tips from my last days playing (Reddit)]].
- [[https://www.reddit.com/r/pokemongo/comments/4srsiu/yet_another_tips_and_tricks_from_a_level_20][Yet another "Tips and Tricks" from a level 20+ (Reddit)]].

* [2016-07-03 Sun] Coffee bookmarks
:PROPERTIES:
:CUSTOM_ID: coffee-bookmarks
:END:
- [[http://www.idosi.org/wasj/wasj2(5)/17.pdf][Changes properties of coffee brew during roasting]].
- [[http://www.coffeegeek.com/guides/aeropresscoldbrew][Aeropress Iced Coffee]].

* [2016-07-03 Sun] Machine learning bookmarks
:PROPERTIES:
:CUSTOM_ID: machine-learning-bookmarks
:END:
:MODIFIED:
[2019-01-27 Sun]
:END:
- [[https://news.ycombinator.com/item?id=12083124][A Course in Machine Learning (Hacker News)]].
- [[https://news.ycombinator.com/item?id=11985709][How to start learning deep learning (Hacker News)]].
- [[http://ofir.io/How-to-Start-Learning-Deep-Learning][How to start learning deep learning]].
- [[https://medium.com/@ageitgey/machine-learning-is-fun-80ea3ec3c471#.tg3yzvbep][Machine Learning is Fun! The world’s easiest introduction to Machine Learning]].
- [[https://news.ycombinator.com/item?id=19000027][Practical Deep Learning for Coders 2019 (Hacker News)]].
- [[https://www.quora.com/What-are-the-best-ways-to-pick-up-Deep-Learning-skills-as-an-engineer/answer/Greg-Brockman?srid=cgo&share=d1ac0da2][What are the best ways to pick up Deep Learning skills as an engineer? (Quora)]].

* [2016-06-17 Fri] Emacs and emotional vocab
:PROPERTIES:
:CUSTOM_ID: emacs-and-emotional-vocab
:END:
Having read [[http://www.nytimes.com/2016/06/05/opinion/sunday/are-you-in-despair-thats-good.html][Are You in Despair? That’s Good]], I was encouraged to expand my emotional vocabulary. As a [[https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el][zone.el]] fan (checkout [[https://github.com/wasamasa/zone-nyan][nyan]], [[https://github.com/kawabata/zone-sl][sl]], and [[https://github.com/kawabata/zone-rainbow][rainbow]]), I looked into writing a zone [[https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el#L52][program]]. When /zone-when-idle/ is set, zone acts as a screensaver of sorts. We can use this to display random emotional vocab whenever Emacs is idle for a period of time. Let's get to it...

Zone keeps a list of programs to choose from when kicked off. Below is a basic /zone-hello/ program, along with an interactive command for previewing. Not much to these. The tiny program prepares the screen for zoning and inserts text while no input is pending.

#+BEGIN_SRC emacs-lisp
  (defun zone-hello ()
    (delete-other-windows)
    (setq mode-line-format nil)
    (zone-fill-out-screen (window-width) (window-height))
    (delete-region (point-min) (point-max))
    (goto-char (point-min))
    (while (not (input-pending-p))
      (insert "hello zone\n")
      (zone-park/sit-for (point-min) 0.2)))

  (defun zone-hello-preview ()
    (interactive)
    (let ((zone-programs [zone-hello]))
      (zone)))
#+END_SRC

Here's what /zone-hello/ looks like:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/emacs-and-emotional-vocab/minimal-zone.gif]]

Back to improving our emotional vocabulary, we'll need a dictionary for our goal. A quick search yields a potential list of [[http://www.psychpage.com/learning/library/assess/feelings.html][words]]. We can use [[http://wordnet.princeton.edu/][WordNet]] to define them while offline. These two sources will do for now. We tie it all together in [[https://github.com/xenodium/dotfiles/blob/master/emacs/ar/zone-words.el][zone-words.el]] and the resulting zone program looks as follow:

#+ATTR_HTML: :width 75% :height 75%
[[file:images/emacs-and-emotional-vocab/emotions.gif]]

UPDATE: Just came across [[http://blog.josephwilk.net/art/emacs-animation.html][Animations With Emacs]]. A post with awesome zone examples.

* [2016-05-10 Tue] Emacs: Find number of days between dates
:PROPERTIES:
:CUSTOM_ID: emacs-find-number-of-days-between-dates
:END:
Needed to find the number of days between two dates. Emacs calendar must know this...

- Fire up the manual (M-x info-emacs-manual or C-h r).
- Info-goto-node (or g).
- Type "counting days" and voilá:

#+BEGIN_QUOTE
To determine the number of days in a range, set the mark on one date
using `C-<SPC>', move point to another date, and type `M-='
(`calendar-count-days-region').  The numbers of days shown is
_inclusive_; that is, it includes the days specified by mark and point.
#+END_QUOTE

#+ATTR_HTML: :width 75% :height 75%
[[file:images/emacs-find-number-of-days-between-dates/emacs-days-between-dates.gif]]

/Note: you can use the mouse to jump to another date, or "g d" (calendar-goto-date)./
* [2016-05-08 Sun] RoutingHTTPServer snippet
:PROPERTIES:
:CUSTOM_ID: routinghttpserver-snippet
:END:
[[https://github.com/mattstevens/RoutingHTTPServer][RoutingHTTPServer]] snippet:

#+BEGIN_SRC objc
  RoutingHTTPServer *routingHTTPServer = [[RoutingHTTPServer alloc] init];
  [routingHTTPServer setPort:8000];
  [routingHTTPServer setDefaultHeader:@"Server" value:@"YourAwesomeApp/1.0"];
  [routingHTTPServer handleMethod:@"GET"
                         withPath:@"/hello"
                            block:^(RouteRequest *request, RouteResponse *response) {
      [response setHeader:@"Content-Type" value:@"text/plain"];
      [response respondWithString:@"Hello!"];
    }];
  NSError *error = nil;
  if (![routingHTTPServer start:&error]) {
    NSLog(@"Error starting HTTP Server: %@\n", error);
   }
#+END_SRC

* [2016-05-06 Fri] Alaska travel bookmarks
:PROPERTIES:
:CUSTOM_ID: alaska-travel-bookmarks
:END:
- Anchorage.
- Denali NP.
- Exit Glacier / Kenai Fjord NP.
- Ice Falls Hike.
- Iditarod race husky camp.
- Seward: Kenai Fjord Wildlife cruise (Major Marine cruises).
- Talkeetna fishing.
* [2016-05-06 Fri] UIViewController bookmarks
:PROPERTIES:
:CUSTOM_ID: uiviewcontroller-bookmarks
:END:
 - [[https://twitter.com/twostraws/status/1035193619307618304][What's your number one tip for avoiding massive view controllers?]].
 - [[http://khanlou.com/2014/09/8-patterns-to-help-you-destroy-massive-view-controller/][8 Patterns to Help You Destroy Massive View Controller]].
 - [[https://realm.io/news/tryswift-daniel-steinberg-blending-cultures/][Blending Cultures: The Best of Functional, Protocol-Oriented, and Object-Oriented Programming]].
 - [[https://www.youtube.com/watch?v=xsSnOQynTHs&feature=youtu.be][Dan Abramov - Live React: Hot Reloading with Time Travel]].
 - [[http://inessential.com/2016/04/08/comparing_reactive_and_traditional][Comparing Reactive and Traditional]].
 - [[http://reswift.github.io/ReSwift/master/getting-started-guide.html][ReSwift: Getting Started]].
 - [[https://github.com/sahandnayebaziz/StateView/blob/master/readme.md][StateView is a UIView substitute that automatically updates itself when data changes]].
 - [[http://inessential.com/2016/04/11/the_objective-c_version][The Objective-C version to "Comparing Reactive and Traditional"]].
 - [[https://realm.io/news/andy-matuschak-refactor-mega-controller][Let's Play: Refactor the Mega Controller!]].
 - [[https://github.com/jlyman/RN-NavigationExperimental-Redux-Example][How to use Redux to manage navigation state in a React Native]].
 - [[https://github.com/sahandnayebaziz/StateView][StateView: UIView substitute automatically updating itself when data changes.]]
 - [[https://developer.apple.com/videos/play/wwdc2015/219/][Mysteries of Auto Layout, Part 2]].
 - [[https://www.youtube.com/watch?v=COviCoUtwx4][Netflix JavaScript Talks - RxJS Version 5]].
 - [[http://www.reactive-streams.org][Reactive Streams]].
* [2016-05-03 Tue] When OOO impulse kicks in...
:PROPERTIES:
:CUSTOM_ID: when-ooo-impulse-kicks-in
:END:
- You start moving trivial bits of code into classes, with the anticipation that you might use it one day. Stop.
- On naming, semantic clarity trumps brevity. Yup, the verbosity may be worth it.
* [2016-05-02 Mon] Pakistan travel bookmarks
:PROPERTIES:
:CUSTOM_ID: pakistan-travel-bookmarks
:END:
:MODIFIED:
[2023-04-20 Thu]
:END:
- [[https://www.phillymag.com/news/2023/04/08/philly-cheesesteaks-lahore-pakistan/][How Philly Cheesesteaks Became a Big Deal in Lahore, Pakistan]].
- Karachi.
- Lahore.
- Rabelpindi.
- Shinwari BBQ.

* [2016-05-02 Mon] Money bookmarks
:PROPERTIES:
:CUSTOM_ID: money-bookmarks
:END:
:MODIFIED:
[2021-11-23 Tue]
:END:
- [[https://www.thestreet.com/slideshow/13552416/1/10-countries-where-that-social-security-check-will-let-you-retire-in-style.html][10 Countries Where That Social Security Check Will Let You Retire in Style (TheStreet)]].
- [[https://www.lovemoney.com/guides/75277/tax-relief-return-cut-your-income-tax-capital-gains-tax-inheritance-tax][20 items to consider for taxes: Income Tax, Council Tax, and Inheritance Tax (lovemoney.com)]].
- [[https://www.benetworthy.com/worst-financial-advice/][25 Bloggers Share The Worst Financial Advice They've Ever Received - Be Net Worthy]].
- [[https://www.reddit.com/r/UKPersonalFinance/comments/7o3o06/25_yo_potentially=_2m_bit_overwhelmed/][25 y/o. Potentially £2m. Bit overwhelmed. : UKPersonalFinance]].
- [[https://financialpanther.com/9-best-personal-finance-podcasts/][9 Best New Personal Finance Podcasts - Financial Panther]].
- [[https://www.reddit.com/r/UKPersonalFinance/comments/cdjdui/a_guide_to_index_funds/][A guide to index funds : UKPersonalFinance]].
- [[http://monevator.com/category/investing/passive-investing-investing/][A guide to passive investing in the UK]].
- [[https://www.reddit.com/r/UKPersonalFinance/comments/aq5ss6/a_simple_example_of_contributing_half_your_age_as/][A Simple Example of Contributing Half Your Age as a Percentage of Salary to a Pension : UKPersonalFinance]].
- [[https://adviserbook.co.uk/][AdviserBook | Find a regulated financial adviser near you]].
- [[https://www.amazon.com/How-Interview-Financial-Advisor-Piaw-ebook/dp/B00GXDT9LY][Amazon.com: How to Interview a Financial Advisor eBook: Piaw Na: Kindle Store]].
- [[https://www.reddit.com/r/UKPersonalFinance/comments/9edd3m/any_critique_against_the_vanguard_ftse_global_all/][Any critique against the Vanguard FTSE global all cap index? : UKPersonalFinance]].
- [[https://www.fca.org.uk/firms/authorised-recognised-funds][Authorised and recognised funds (FCA)]].
- [[https://www.bankaccountsavings.co.uk/calculator][Bank Account Savings: Open up multiple accounts to maximise your savings]].
- [[https://benefits-calculator.turn2us.org.uk/AboutYou][Benefit Calculator - About You - Turn2us]].
- [[https://www.vanguard.com/pdf/icrpr.pdf][Best practices for portfolio rebalancing (Vanguard research July 2010)]].
- [[https://www.vanguard.com/pdf/ISGPORE.pdf][Best practices for portfolio rebalancing (Vanguard)]].
- [[https://www.bogleheads.org/wiki/Bogleheads%C2%AE_investment_philosophy][Bogleheads® investment philosophy - Bogleheads]].
